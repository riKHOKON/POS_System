/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package shop.management.application.view;

import java.awt.HeadlessException;
import java.awt.Image;
import java.awt.print.PrinterException;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.text.MessageFormat;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.ImageIcon;
import javax.swing.JOptionPane;
import javax.swing.JTable;
import javax.swing.JTextField;
import net.proteanit.sql.DbUtils;
import shop.management.application.DbConnector;
import shop.management.application.model.Expense;
import shop.management.application.model.Product;
import shop.management.application.model.User;

/**
 *
 * @author rIslam
 */
public final class StockCheckFrom extends javax.swing.JFrame {

    /**
     * Creates new form StockCheckFrom
     * @throws java.sql.SQLException
     */
    private static User currentUser = new User();
    private final String imagePath = null;
    private  int pos = 0;
    
    public StockCheckFrom() throws SQLException {
        initComponents();
        updateItemTable();
        calculatingGrandTotal();
        fillComboBoxWithCategory();
        fillComboBoxWithCompany();
        Calendar now = Calendar.getInstance();
        fromDate_chooser.setDateFormatString("yyyy-MM-dd");
        toDate_chooser.setDateFormatString("yyyy-MM-dd");
        fromDate_chooser.setDate(now.getTime());
        toDate_chooser.setDate(now.getTime());
        fillNameTxtWithItemsName();
              jButton12.setVisible(false);
        jButton13.setVisible(false);
        jButton14.setVisible(false);
        jButton15.setVisible(false);
    }
    public StockCheckFrom(User u) throws SQLException {
        initComponents();
        updateItemTable();
        calculatingGrandTotal();
        fillComboBoxWithCategory();
        fillComboBoxWithCompany();
        Calendar now = Calendar.getInstance();
        fromDate_chooser.setDateFormatString("yyyy-MM-dd");
        toDate_chooser.setDateFormatString("yyyy-MM-dd");
        fromDate_chooser.setDate(now.getTime());
        toDate_chooser.setDate(now.getTime());
        fillNameTxtWithItemsName();
        StockCheckFrom.currentUser = u;
        jButton12.setVisible(false);
        jButton13.setVisible(false);
        jButton14.setVisible(false);
        jButton15.setVisible(false);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jPanel2 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        products_tbl = new javax.swing.JTable();
        grandTotal_lbl = new javax.swing.JLabel();
        totalQty_lbl = new javax.swing.JLabel();
        jPanel3 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        id_txt = new javax.swing.JTextField();
        name_txt = new javax.swing.JTextField();
        quantity_txt = new javax.swing.JTextField();
        type_cmb = new javax.swing.JComboBox<>();
        company_cmb = new javax.swing.JComboBox<>();
        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        jButton3 = new javax.swing.JButton();
        jButton4 = new javax.swing.JButton();
        jButton5 = new javax.swing.JButton();
        jButton6 = new javax.swing.JButton();
        jPanel4 = new javax.swing.JPanel();
        img_lbl = new javax.swing.JLabel();
        jButton7 = new javax.swing.JButton();
        jButton8 = new javax.swing.JButton();
        jButton9 = new javax.swing.JButton();
        jButton10 = new javax.swing.JButton();
        jButton11 = new javax.swing.JButton();
        jButton12 = new javax.swing.JButton();
        jButton13 = new javax.swing.JButton();
        jButton14 = new javax.swing.JButton();
        jButton15 = new javax.swing.JButton();
        jLabel6 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        fromDate_chooser = new com.toedter.calendar.JDateChooser();
        toDate_chooser = new com.toedter.calendar.JDateChooser();
        searchByDate_btn = new javax.swing.JButton();
        availableCheckBox = new javax.swing.JCheckBox();
        jCheckBox2 = new javax.swing.JCheckBox();
        itemInfo_lbl = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        jButton16 = new javax.swing.JButton();
        jButton17 = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DO_NOTHING_ON_CLOSE);
        setTitle("STOCK CHECKING.");
        setResizable(false);

        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder(new javax.swing.border.LineBorder(new java.awt.Color(204, 0, 0), 2, true), "All Items in Inventory", javax.swing.border.TitledBorder.RIGHT, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 1, 11))); // NOI18N

        jPanel2.setBackground(new java.awt.Color(204, 255, 204));

        products_tbl.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {

            }
        ));
        products_tbl.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                products_tblMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(products_tbl);

        grandTotal_lbl.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N

        totalQty_lbl.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(totalQty_lbl, javax.swing.GroupLayout.PREFERRED_SIZE, 370, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(84, 84, 84)
                .addComponent(grandTotal_lbl, javax.swing.GroupLayout.PREFERRED_SIZE, 277, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
            .addComponent(jScrollPane1)
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 290, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(totalQty_lbl, javax.swing.GroupLayout.PREFERRED_SIZE, 27, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(grandTotal_lbl, javax.swing.GroupLayout.PREFERRED_SIZE, 27, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(0, 11, Short.MAX_VALUE))
        );

        jPanel3.setBackground(new java.awt.Color(204, 204, 204));
        jPanel3.setBorder(javax.swing.BorderFactory.createTitledBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 0, 0), 1, true), "Search Panel", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 1, 11))); // NOI18N

        jLabel1.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabel1.setText("ID :");

        jLabel2.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabel2.setText("Name : ");

        jLabel3.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabel3.setText("Company :");

        jLabel4.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabel4.setText("Type :");

        jLabel5.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabel5.setText("Quantity :");

        id_txt.setFont(new java.awt.Font("Tahoma", 1, 13)); // NOI18N
        id_txt.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        id_txt.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 0, 0), 1, true));

        name_txt.setFont(new java.awt.Font("Tahoma", 1, 13)); // NOI18N
        name_txt.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        name_txt.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 0, 0), 1, true));

        quantity_txt.setFont(new java.awt.Font("Tahoma", 1, 13)); // NOI18N
        quantity_txt.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        quantity_txt.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 0, 0), 1, true));

        type_cmb.setFont(new java.awt.Font("Tahoma", 1, 13)); // NOI18N
        type_cmb.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 0, 0), 1, true));
        type_cmb.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));

        company_cmb.setFont(new java.awt.Font("Tahoma", 1, 13)); // NOI18N
        company_cmb.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 0, 0), 1, true));

        jButton1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/shop/management/application/res/zoom-icon.png"))); // NOI18N
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jButton2.setIcon(new javax.swing.ImageIcon(getClass().getResource("/shop/management/application/res/zoom-icon.png"))); // NOI18N
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        jButton3.setIcon(new javax.swing.ImageIcon(getClass().getResource("/shop/management/application/res/zoom-icon.png"))); // NOI18N
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });

        jButton4.setIcon(new javax.swing.ImageIcon(getClass().getResource("/shop/management/application/res/zoom-icon.png"))); // NOI18N
        jButton4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton4ActionPerformed(evt);
            }
        });

        jButton5.setIcon(new javax.swing.ImageIcon(getClass().getResource("/shop/management/application/res/last.png"))); // NOI18N
        jButton5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton5ActionPerformed(evt);
            }
        });

        jButton6.setIcon(new javax.swing.ImageIcon(getClass().getResource("/shop/management/application/res/frist.png"))); // NOI18N
        jButton6.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton6ActionPerformed(evt);
            }
        });

        img_lbl.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 0, 0), 1, true));

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(img_lbl, javax.swing.GroupLayout.PREFERRED_SIZE, 325, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(img_lbl, javax.swing.GroupLayout.PREFERRED_SIZE, 249, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        jButton7.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jButton7.setIcon(new javax.swing.ImageIcon(getClass().getResource("/shop/management/application/res/all.png"))); // NOI18N
        jButton7.setText("All");
        jButton7.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton7ActionPerformed(evt);
            }
        });

        jButton8.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jButton8.setIcon(new javax.swing.ImageIcon(getClass().getResource("/shop/management/application/res/printe.png"))); // NOI18N
        jButton8.setText("Print");
        jButton8.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton8ActionPerformed(evt);
            }
        });

        jButton9.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jButton9.setIcon(new javax.swing.ImageIcon(getClass().getResource("/shop/management/application/res/refreshbig.png"))); // NOI18N
        jButton9.setText("Refresh");
        jButton9.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton9ActionPerformed(evt);
            }
        });

        jButton10.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jButton10.setIcon(new javax.swing.ImageIcon(getClass().getResource("/shop/management/application/res/exit.png"))); // NOI18N
        jButton10.setText("Close");
        jButton10.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton10ActionPerformed(evt);
            }
        });

        jButton11.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jButton11.setIcon(new javax.swing.ImageIcon(getClass().getResource("/shop/management/application/res/stock out.png"))); // NOI18N
        jButton11.setText("Stock out");
        jButton11.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton11ActionPerformed(evt);
            }
        });

        jButton12.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jButton12.setIcon(new javax.swing.ImageIcon(getClass().getResource("/shop/management/application/res/frist.png"))); // NOI18N
        jButton12.setText("Frist");
        jButton12.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton12ActionPerformed(evt);
            }
        });

        jButton13.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jButton13.setIcon(new javax.swing.ImageIcon(getClass().getResource("/shop/management/application/res/next.png"))); // NOI18N
        jButton13.setText("Next");
        jButton13.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton13ActionPerformed(evt);
            }
        });

        jButton14.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jButton14.setIcon(new javax.swing.ImageIcon(getClass().getResource("/shop/management/application/res/pre.png"))); // NOI18N
        jButton14.setText("Pre.");
        jButton14.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton14ActionPerformed(evt);
            }
        });

        jButton15.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jButton15.setIcon(new javax.swing.ImageIcon(getClass().getResource("/shop/management/application/res/last.png"))); // NOI18N
        jButton15.setText("Last");
        jButton15.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton15ActionPerformed(evt);
            }
        });

        jLabel6.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabel6.setText("From :");

        jLabel7.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabel7.setText("To :");

        fromDate_chooser.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 0, 0), 1, true));
        fromDate_chooser.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N

        toDate_chooser.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 0, 0), 1, true));
        toDate_chooser.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N

        searchByDate_btn.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        searchByDate_btn.setIcon(new javax.swing.ImageIcon(getClass().getResource("/shop/management/application/res/preview.png"))); // NOI18N
        searchByDate_btn.setText("Search");
        searchByDate_btn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                searchByDate_btnActionPerformed(evt);
            }
        });

        availableCheckBox.setText("available");

        jCheckBox2.setText("Stock out");

        itemInfo_lbl.setFont(new java.awt.Font("Tahoma", 1, 9)); // NOI18N

        jLabel8.setFont(new java.awt.Font("Tw Cen MT Condensed", 0, 10)); // NOI18N
        jLabel8.setText("0120.rashedul@gmail.com");

        jButton16.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jButton16.setIcon(new javax.swing.ImageIcon(getClass().getResource("/shop/management/application/res/database-check-icon.png"))); // NOI18N
        jButton16.setText("Available");
        jButton16.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton16ActionPerformed(evt);
            }
        });

        jButton17.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jButton17.setIcon(new javax.swing.ImageIcon(getClass().getResource("/shop/management/application/res/count-icon.png"))); // NOI18N
        jButton17.setText("Leanden");
        jButton17.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton17ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel3Layout.createSequentialGroup()
                        .addComponent(searchByDate_btn, javax.swing.GroupLayout.PREFERRED_SIZE, 168, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(83, 83, 83))
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel3Layout.createSequentialGroup()
                                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addGroup(jPanel3Layout.createSequentialGroup()
                                        .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 42, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                        .addComponent(id_txt, javax.swing.GroupLayout.PREFERRED_SIZE, 216, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGroup(jPanel3Layout.createSequentialGroup()
                                        .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 42, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                        .addComponent(name_txt))
                                    .addGroup(jPanel3Layout.createSequentialGroup()
                                        .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 42, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                        .addComponent(type_cmb, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                    .addGroup(jPanel3Layout.createSequentialGroup()
                                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(jLabel3)
                                            .addComponent(jLabel5))
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(company_cmb, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel3Layout.createSequentialGroup()
                                                .addGap(0, 0, Short.MAX_VALUE)
                                                .addComponent(jButton5, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                .addComponent(quantity_txt, javax.swing.GroupLayout.PREFERRED_SIZE, 178, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jButton6, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jButton3, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                        .addComponent(jButton4, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                                        .addComponent(jButton2, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE))))
                            .addGroup(jPanel3Layout.createSequentialGroup()
                                .addComponent(jLabel6)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addGroup(jPanel3Layout.createSequentialGroup()
                                        .addComponent(jButton11)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addComponent(jButton16, javax.swing.GroupLayout.PREFERRED_SIZE, 115, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGroup(jPanel3Layout.createSequentialGroup()
                                        .addComponent(fromDate_chooser, javax.swing.GroupLayout.PREFERRED_SIZE, 123, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(jLabel7)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(toDate_chooser, javax.swing.GroupLayout.PREFERRED_SIZE, 123, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                        .addGap(33, 33, 33)))
                .addComponent(jPanel4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel3Layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(itemInfo_lbl, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel3Layout.createSequentialGroup()
                                .addGap(33, 33, 33)
                                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addGroup(jPanel3Layout.createSequentialGroup()
                                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                            .addComponent(jButton12, javax.swing.GroupLayout.PREFERRED_SIZE, 83, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(availableCheckBox))
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addGroup(jPanel3Layout.createSequentialGroup()
                                                .addGap(0, 0, Short.MAX_VALUE)
                                                .addComponent(jButton13)
                                                .addGap(27, 27, 27)
                                                .addComponent(jButton14, javax.swing.GroupLayout.PREFERRED_SIZE, 83, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addGap(27, 27, 27)
                                                .addComponent(jButton15))
                                            .addGroup(jPanel3Layout.createSequentialGroup()
                                                .addComponent(jCheckBox2)
                                                .addGap(0, 0, Short.MAX_VALUE))))
                                    .addGroup(jPanel3Layout.createSequentialGroup()
                                        .addComponent(jButton7, javax.swing.GroupLayout.PREFERRED_SIZE, 124, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(18, 18, 18)
                                        .addComponent(jButton8, javax.swing.GroupLayout.PREFERRED_SIZE, 124, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(18, 18, 18)
                                        .addComponent(jButton9))))
                            .addGroup(jPanel3Layout.createSequentialGroup()
                                .addGap(64, 64, 64)
                                .addComponent(jButton10, javax.swing.GroupLayout.PREFERRED_SIZE, 355, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addContainerGap(84, Short.MAX_VALUE))
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel3Layout.createSequentialGroup()
                                .addGap(91, 91, 91)
                                .addComponent(jLabel8, javax.swing.GroupLayout.PREFERRED_SIZE, 217, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(jPanel3Layout.createSequentialGroup()
                                .addGap(100, 100, 100)
                                .addComponent(jButton17, javax.swing.GroupLayout.PREFERRED_SIZE, 272, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(0, 0, Short.MAX_VALUE))))
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(itemInfo_lbl, javax.swing.GroupLayout.PREFERRED_SIZE, 27, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(availableCheckBox)
                    .addComponent(jCheckBox2))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton12)
                    .addComponent(jButton14)
                    .addComponent(jButton15)
                    .addComponent(jButton13))
                .addGap(18, 18, 18)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton7, javax.swing.GroupLayout.PREFERRED_SIZE, 58, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButton8, javax.swing.GroupLayout.PREFERRED_SIZE, 58, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButton9, javax.swing.GroupLayout.PREFERRED_SIZE, 58, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jButton17)
                .addGap(18, 18, 18)
                .addComponent(jButton10)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel8))
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 18, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(jLabel1)
                                .addComponent(id_txt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(jLabel2)
                                .addComponent(name_txt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(jButton2, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jLabel4)
                            .addComponent(type_cmb)
                            .addComponent(jButton4, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(company_cmb, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel3)
                            .addComponent(jButton3, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(13, 13, 13)
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jButton6, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(quantity_txt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel5)
                            .addComponent(jButton5, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel7)
                            .addComponent(jLabel6)
                            .addComponent(fromDate_chooser, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(toDate_chooser, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(searchByDate_btn)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jButton11, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jButton16, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addComponent(jPanel4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void products_tblMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_products_tblMouseClicked
        PreparedStatement pst = null;
        Connection con = DbConnector.ConnectDB();
        ResultSet rs = null;
        int row = products_tbl.getSelectedRow();
        String index;
        index = (products_tbl.getModel().getValueAt(row, 0).toString());
        try {
            String query = "SELECT * FROM products WHERE ProductId = '"+index+"'";
            pst = con.prepareStatement(query);
            rs = pst.executeQuery();
            if (rs.next()) {
                int productId = rs.getInt("ProductId");
                //id_lbl.setText(Integer.toString(productId));
                String name = rs.getString("Name");
                //name_txt.setText(name);
                String cat = rs.getString("Category");
                //cat_cmb.setSelectedItem((String)cat);
                String com = rs.getString("Company");
                //com_cmb.setSelectedItem((String)com);
                float pCost = rs.getFloat("PurchaseCost");
               // pCost_txt.setText(Float.toString(pCost));
                int qty = rs.getInt("Quantity");
                //qty_txt.setText(Integer.toString(qty));
                String dateValue = rs.getString("InhouseDate");
                java.util.Date date = new SimpleDateFormat("yyyy-MM-dd").parse(dateValue);
               // date_choose.setDate(date);
                byte[] imageData = rs.getBytes("Image");
                img_lbl.setIcon(resizeImage(null, imageData,img_lbl.getWidth(), img_lbl.getHeight(),Image.SCALE_SMOOTH));
                String supplier = rs.getString("Supplier");
                //sup_txt.setText(supplier);
                String des = rs.getString("Description");
                //des_txt.setText(des);
                String tk = "৳";
                itemInfo_lbl.setText(productId+".Name:"+name+",Price:"+tk+""+Float.toString(pCost)+",Qty:"+Integer.toString(qty)+",Total Price:"+tk+""+Float.toString((float)(pCost * qty)));
                
                if (qty != 0) {
                    availableCheckBox.setSelected(true);
                    jCheckBox2.setSelected(false);
                }else{
                    availableCheckBox.setSelected(false);
                    jCheckBox2.setSelected(true);
                }
            
            }
        } catch (SQLException | ParseException e) {
            JOptionPane.showMessageDialog(null, e);
        }
        finally{
            try {
                rs.close();
                pst.close();
                con.close();
            } catch (SQLException e) {
            
            }
        }
    }//GEN-LAST:event_products_tblMouseClicked

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        String name = name_txt.getText();
        searchItemsByName(name);
        name_txt.setText("");
    }//GEN-LAST:event_jButton2ActionPerformed

    private void jButton4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton4ActionPerformed
        try {
            String value = (String)type_cmb.getSelectedItem();
            searchItemsByType(value);  
            calculatingGrandTotal(value);
            type_cmb.setSelectedItem(null);
            itemInfo_lbl.setText("");
            img_lbl.setIcon(null);
        } catch (SQLException e) {
        }
    }//GEN-LAST:event_jButton4ActionPerformed

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        try {
            String value = (String)company_cmb.getSelectedItem();
            searchItemsByCompany(value);
            calculatingGrandTotalCompanyWise(value);
            itemInfo_lbl.setText("");
            company_cmb.setSelectedItem(null);
        } catch (SQLException e) {
        }
    }//GEN-LAST:event_jButton3ActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        try {
            String value = id_txt.getText(); 
        if ("".equals(value)) {
            JOptionPane.showMessageDialog(null, "Select ID frist.");
        }else{
            int id = Integer.parseInt(value);
            searchItemsById(id);
            id_txt.setText("");
            
        }
        } catch (HeadlessException | NumberFormatException e) {
            JOptionPane.showMessageDialog(null, "Enter a valid ID Please.");
        }
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jButton5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton5ActionPerformed
       try {
            String value = quantity_txt.getText(); 
            if ("".equals(value)) {
                JOptionPane.showMessageDialog(null, "Select Qty frist.");
            }else{
                int qty = Integer.parseInt(value);
                searchItemsByGetterQty(qty);
                quantity_txt.setText("");
            }
        } catch (HeadlessException | NumberFormatException e) {
            JOptionPane.showMessageDialog(null, "Enter a valid qty. Please.");
        }
    }//GEN-LAST:event_jButton5ActionPerformed

    private void jButton6ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton6ActionPerformed
        try {
            String value = quantity_txt.getText(); 
            if ("".equals(value)) {
                JOptionPane.showMessageDialog(null, "Select Qty frist.");
            }else{
                int qty = Integer.parseInt(value);
                searchItemsByLowerQty(qty);
                quantity_txt.setText("");
            }
        } catch (HeadlessException | NumberFormatException e) {
            JOptionPane.showMessageDialog(null, "Enter a valid qty. Please.");
        }
    }//GEN-LAST:event_jButton6ActionPerformed

    private void jButton7ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton7ActionPerformed
        updateItemTable();
        try {
            calculatingGrandTotal();
        } catch (SQLException ex) {
            Logger.getLogger(StockCheckFrom.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_jButton7ActionPerformed

    private void jButton10ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton10ActionPerformed
        if ("Administrator".equals(currentUser.getUserType())) {
            java.awt.EventQueue.invokeLater(() -> {
                new ActivitiesForm(currentUser).setVisible(true);
                this.dispose();
            });
        }else if("Employee".equals(currentUser.getUserType())) {
            java.awt.EventQueue.invokeLater(() -> {
                new ActivitiesForEmployeeForm(currentUser).setVisible(true);
                this.dispose();
            });
            
        }   
    }//GEN-LAST:event_jButton10ActionPerformed

    private void jButton9ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton9ActionPerformed
        try {
            new StockCheckFrom(currentUser).setVisible(true);
        } catch (SQLException ex) {
            Logger.getLogger(StockCheckFrom.class.getName()).log(Level.SEVERE, null, ex);
        }
        this.dispose();
    }//GEN-LAST:event_jButton9ActionPerformed

    private void jButton8ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton8ActionPerformed
        MessageFormat header = new MessageFormat("Inventory Report.");
        MessageFormat footer = new MessageFormat("Page{0,number,integer}");
        try {
            products_tbl.print(JTable.PrintMode.FIT_WIDTH,header,footer);
        } catch (PrinterException e) {
        }
        
    }//GEN-LAST:event_jButton8ActionPerformed

    private void jButton11ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton11ActionPerformed
        PreparedStatement pst = null;
        Connection con = DbConnector.ConnectDB();
        ResultSet rs = null;
        try {
         String sql = "SELECT * FROM products WHERE Quantity = '"+0+"'"; 
         pst = con.prepareStatement(sql);
         rs = pst.executeQuery();
         products_tbl.setModel(DbUtils.resultSetToTableModel(rs));
         
        
        } catch (SQLException e) {
            JOptionPane.showMessageDialog(null, e);
        } finally{
            try {
                rs.close();
                pst.close();
                con.close();
            } catch (SQLException e) {
            
            }
        }
    }//GEN-LAST:event_jButton11ActionPerformed

    private void jButton12ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton12ActionPerformed
//        pos = 0;
//        try {
//            showSelectedProduct(pos);
//            
//        } catch (SQLException ex) {
//          //  Logger.getLogger(UserEditingForm.class.getName()).log(Level.SEVERE, null, ex);
//        }
    }//GEN-LAST:event_jButton12ActionPerformed

    private void jButton13ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton13ActionPerformed
//        pos++;
//        try {
//            if (pos >= getAllProducts().size()) {
//                pos = getAllProducts().size()-1;
//            }
//            showSelectedProduct(pos);
//            //getAllProducts().clear();
//        } catch (SQLException ex) {
//          //  Logger.getLogger(UserEditingForm.class.getName()).log(Level.SEVERE, null, ex);
//        }
    }//GEN-LAST:event_jButton13ActionPerformed

    private void jButton14ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton14ActionPerformed
//        pos--;
//        try {
//            if (pos < 0) {
//                pos = 0;
//            }
//            showSelectedProduct(pos);
//        } catch (SQLException ex) {
//            //Logger.getLogger(UserEditingForm.class.getName()).log(Level.SEVERE, null, ex);
//        }
    }//GEN-LAST:event_jButton14ActionPerformed

    private void jButton15ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton15ActionPerformed
//        try {
//            pos = getAllProducts().size() - 1;
//            showSelectedProduct(pos);
//           // getAllProducts().clear();
//        } catch (SQLException ex) {
//           // Logger.getLogger(UserEditingForm.class.getName()).log(Level.SEVERE, null, ex);
//        }
    }//GEN-LAST:event_jButton15ActionPerformed

    private void searchByDate_btnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_searchByDate_btnActionPerformed
       float totalAmount = 0;
       int totalQty = 0;
        SimpleDateFormat dateFormate = new SimpleDateFormat("yyyy-MM-dd");
        String dateFrom = dateFormate.format(fromDate_chooser.getDate());
        String dateTo = dateFormate.format(toDate_chooser.getDate());
        
            if (checkDates()) {
                try {
                    for (Product allDateWiseEnteredProduct : getAllDateWiseInhouseItems(dateFrom,dateTo)) {
                        totalAmount += allDateWiseEnteredProduct.getBuyingPrice() * allDateWiseEnteredProduct.getQty();
                        totalQty += allDateWiseEnteredProduct.getQty();
                    }
                    searchProductsFromDateToDate(dateFrom,dateTo);
                    totalQty_lbl.setText("Total items :"+Integer.toString(totalQty));
                    grandTotal_lbl.setText("Grand Total : ৳ "+Float.toString(totalAmount));
                    getAllDateWiseInhouseItems(dateTo, dateTo).clear();
                    totalAmount = 0;
                    totalQty = 0;
                } catch (SQLException e) {
                
                } 
            }
    }//GEN-LAST:event_searchByDate_btnActionPerformed

    private void jButton16ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton16ActionPerformed
        PreparedStatement pst = null;
        Connection con = DbConnector.ConnectDB();
        ResultSet rs = null;
        try {
         String sql = "SELECT * FROM products WHERE Quantity > '"+0+"'"; 
         pst = con.prepareStatement(sql);
         rs = pst.executeQuery();
         products_tbl.setModel(DbUtils.resultSetToTableModel(rs));
         
        
        } catch (SQLException e) {
            JOptionPane.showMessageDialog(null, e);
        } finally{
            try {
                rs.close();
                pst.close();
                con.close();
            } catch (SQLException e) {
            
            }
        }
    }//GEN-LAST:event_jButton16ActionPerformed

    private void jButton17ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton17ActionPerformed
//        java.awt.EventQueue.invokeLater(() -> {
//            new LenDenForm().setVisible(true);
//            this.dispose();
//        });
//        new LenDenFrom().setVisible(true);
//        this.dispose();
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new LenDenFrom(currentUser).setVisible(true);
            }
        });
        this.dispose();
    }//GEN-LAST:event_jButton17ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(StockCheckFrom.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(StockCheckFrom.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(StockCheckFrom.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(StockCheckFrom.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(() -> {
            try {
                new StockCheckFrom().setVisible(true);
            } catch (SQLException ex) {
                Logger.getLogger(StockCheckFrom.class.getName()).log(Level.SEVERE, null, ex);
            }
        });
    }
    private void updateItemTable(){
        PreparedStatement pst = null;
        Connection con = DbConnector.ConnectDB();
        ResultSet rs = null;
        try {
         String sql = "SELECT * FROM products"; 
         pst = con.prepareStatement(sql);
         rs = pst.executeQuery();
         products_tbl.setModel(DbUtils.resultSetToTableModel(rs));
        } catch (SQLException e) {
            JOptionPane.showMessageDialog(null, e);
        } finally{
            try {
                rs.close();
                pst.close();
                con.close();
            } catch (SQLException e) {
            
            }
        }
    
    }
    public void calculatingGrandTotal() throws SQLException{
        int totalQty = 0;
        float grandTotal = 0;
        for (Product allItem : getAllItems()) {
            grandTotal += ( allItem.getBuyingPrice() * allItem.getQty());
            totalQty += allItem.getQty();
        }
        String tk = "৳";
        grandTotal_lbl.setText("Grand Total : "+tk+" "+Float.toString(grandTotal));
        totalQty_lbl.setText("Total items : "+Integer.toString(totalQty));
        getAllItems().clear();
    }
    public ArrayList<Product> getAllItems() throws SQLException{
        ArrayList<Product> products = new ArrayList<>();
        Connection con = DbConnector.ConnectDB();
        String query  = "SELECT * FROM products";
        Statement st = con.createStatement();
        ResultSet rs = null;
        try {
            rs = st.executeQuery(query);
            Product product;
            while(rs.next()){
//                product = new Product(rs.getInt("ProductId"),rs.getString("Name"),rs.getString("Category"),
//                    rs.getString("Company"),rs.getFloat("PurchaseCost"),rs.getInt("Quantity"),
//                    rs.getDate("InhouseDate").toString(),rs.getBytes("Image"),rs.getString("Supplier"),rs.getString("Description"));
                product = new Product(rs.getInt("ProductId"),rs.getInt("Quantity"),rs.getFloat("PurchaseCost"));
                products.add(product);
            }
        } catch (SQLException ex) {
            //Logger.getLogger(HomeForm.class.getName()).log(Level.SEVERE, null, ex);
        }
        finally{
            try {
                rs.close();
                st.close();
                con.close();
            } catch (SQLException e) {
            }
        }
        return products;
    }
    public ImageIcon resizeImage(String imagePath, byte[] pic, int width, int height, int SCALE_SMOOTH){
        ImageIcon myImage = null;
        if (imagePath != null) {
            myImage = new ImageIcon(imagePath);
        }else{
            myImage = new ImageIcon(pic);
        }
        Image img = myImage.getImage();
        Image img2 = img.getScaledInstance(img_lbl.getWidth(), img_lbl.getHeight(),Image.SCALE_SMOOTH);
        ImageIcon image = new ImageIcon(img2);
        return image;
    }
    public void searchItemsByName(String n){
        PreparedStatement pst = null;
        Connection con = DbConnector.ConnectDB();
        ResultSet rs = null;
        try {
         String sql = "SELECT * FROM products WHERE Name = '"+n+"'"; 
         pst = con.prepareStatement(sql);
         rs = pst.executeQuery();
         products_tbl.setModel(DbUtils.resultSetToTableModel(rs));
          rs = pst.executeQuery();
            if (rs.next()) {
                int productId = rs.getInt("ProductId");
                //id_lbl.setText(Integer.toString(productId));
                String name = rs.getString("Name");
                //name_txt.setText(name);
                String cat = rs.getString("Category");
                //cat_cmb.setSelectedItem((String)cat);
                String com = rs.getString("Company");
                //com_cmb.setSelectedItem((String)com);
                float pCost = rs.getFloat("PurchaseCost");
               // pCost_txt.setText(Float.toString(pCost));
                int qty = rs.getInt("Quantity");
                //qty_txt.setText(Integer.toString(qty));
                String dateValue = rs.getString("InhouseDate");
               // java.util.Date date = new SimpleDateFormat("yyyy-MM-dd").parse(dateValue);
               // date_choose.setDate(date);
                byte[] imageData = rs.getBytes("Image");
                img_lbl.setIcon(resizeImage(null, imageData,img_lbl.getWidth(), img_lbl.getHeight(),Image.SCALE_SMOOTH));
                String supplier = rs.getString("Supplier");
                //sup_txt.setText(supplier);
                String des = rs.getString("Description");
                //des_txt.setText(des);
                String tk = "৳";
                itemInfo_lbl.setText(productId+".Name:"+name+",Price:"+tk+""+Float.toString(pCost)+",Qty:"+Integer.toString(qty)+",Total Price:"+tk+""+Float.toString((float)(pCost * qty)));
                if (qty != 0) {
                    availableCheckBox.setSelected(true);
                    jCheckBox2.setSelected(false);
                }else{
                    availableCheckBox.setSelected(false);
                    jCheckBox2.setSelected(true);
                }
            }
        
        } catch (SQLException e) {
            JOptionPane.showMessageDialog(null, e);
        } finally{
            try {
                rs.close();
                pst.close();
                con.close();
            } catch (SQLException e) {
            
            }
        }
    }
    private void fillComboBoxWithCategory(){
        PreparedStatement pst = null;
        Connection con = DbConnector.ConnectDB();
        ResultSet rs = null;
        try {
            String sql = "SELECT * FROM categories"; 
            pst = con.prepareStatement(sql);
            rs = pst.executeQuery();
            while (rs.next()) {
                    type_cmb.addItem(rs.getString(2));
                    //type_cmb.addItem(rs.getString(2));
            }
        } 
        catch (SQLException e) {
               JOptionPane.showMessageDialog(null, e);
        } finally{
            try {
                    rs.close();
                    pst.close();
                    con.close();
            } catch (SQLException e) {
            
            }
        }
    }
    private void fillComboBoxWithCompany(){
        PreparedStatement pst = null;
        Connection con = DbConnector.ConnectDB();
        ResultSet rs = null;
        try {
            String sql = "SELECT * FROM companies"; 
            pst = con.prepareStatement(sql);
            rs = pst.executeQuery();
            while (rs.next()) {
                    company_cmb.addItem(rs.getString(2));   
                    //company_cmb.addItem(rs.getString(2));
                }
            } catch (SQLException e) {
                JOptionPane.showMessageDialog(null, e);
            } finally{
                try {
                    rs.close();
                    pst.close();
                    con.close();
                } catch (SQLException e) {
            }
        }
    }
    private void fillNameTxtWithItemsName(){
        PreparedStatement pst = null;
        Connection con = DbConnector.ConnectDB();
        ResultSet rs = null;
        try {
            String sql = "SELECT * FROM products"; 
            pst = con.prepareStatement(sql);
            rs = pst.executeQuery();
                while (rs.next()) {
                    //company_cmb.addItem(rs.getString(2));   
                    //company_cmb.addItem(rs.getString(2));
                    //name_txt.
                }
            } catch (SQLException e) {
                JOptionPane.showMessageDialog(null, e);
            } finally{
                try {
                    rs.close();
                    pst.close();
                    con.close();
                } catch (SQLException e) {
            }
        }
    }
    
    
    public void searchItemsByType(String t){
        PreparedStatement pst = null;
        Connection con = DbConnector.ConnectDB();
        ResultSet rs = null;
        try {
            String sql = "SELECT * FROM products WHERE Category = '"+t+"'"; 
            pst = con.prepareStatement(sql);
            rs = pst.executeQuery();
            products_tbl.setModel(DbUtils.resultSetToTableModel(rs));
        } catch (SQLException e) {
            JOptionPane.showMessageDialog(null, e);
        } finally{
            try {
                rs.close();
                pst.close();
                con.close();
            } catch (SQLException e) {
            
            }
        }
    }
    public void calculatingGrandTotal(String category) throws SQLException{
        int totalQty = 0;
        float grandTotal = 0;
        for (Product allItem : getAllCategorisedItems(category)) {
            totalQty += allItem.getQty();
            grandTotal += ( allItem.getBuyingPrice() * allItem.getQty());
        }
        String tk = "৳";
        grandTotal_lbl.setText("Grand Total : "+tk+" "+Float.toString(grandTotal));
        totalQty_lbl.setText("Total"+category+" :"+Integer.toString(totalQty));
        getAllCategorisedItems(category).clear();
        totalQty = 0;
        grandTotal = 0;
    }
    public void calculatingGrandTotalCompanyWise(String company) throws SQLException{
        int totalQty = 0;
        float grandTotal = 0;
        for (Product allItem : getAllCompanyItems(company)) {
            grandTotal += ( allItem.getBuyingPrice() * allItem.getQty());
            totalQty += allItem.getQty();
        }
        String tk = "৳";
        grandTotal_lbl.setText("Grand Total : "+tk+" "+Float.toString(grandTotal));
        totalQty_lbl.setText("Total "+company+" :"+Integer.toString(totalQty));
        getAllCompanyItems(company).clear();
        totalQty = 0;
        grandTotal = 0;
    }
    public ArrayList<Product> getAllCategorisedItems(String name) throws SQLException{
        ArrayList<Product> products = new ArrayList<>();
        Connection con = DbConnector.ConnectDB();
        String query  = "SELECT * FROM products WHERE Category = '"+name+"'";
        Statement st = con.createStatement();
        ResultSet rs = null;
        try {
            rs = st.executeQuery(query);
            Product product;
            while(rs.next()){
//                product = new Product(rs.getInt("ProductId"),rs.getString("Name"),rs.getString("Category"),
//                    rs.getString("Company"),rs.getFloat("PurchaseCost"),rs.getInt("Quantity"),
//                    rs.getDate("InhouseDate").toString(),rs.getBytes("Image"),rs.getString("Supplier"),rs.getString("Description"));
                 product = new Product(rs.getInt("ProductId"),rs.getInt("Quantity"),rs.getFloat("PurchaseCost"));
                products.add(product);
            }
        } catch (SQLException ex) {
           // Logger.getLogger(HomeForm.class.getName()).log(Level.SEVERE, null, ex);
        }
        finally{
            try {
                rs.close();
                st.close();
                con.close();
            } catch (SQLException e) {
            }
        }
        return products;
    }
    public ArrayList<Product> getAllCompanyItems(String name) throws SQLException{
        ArrayList<Product> products = new ArrayList<>();
        Connection con = DbConnector.ConnectDB();
        String query  = "SELECT * FROM products WHERE Company = '"+name+"'";
        Statement st = con.createStatement();
        ResultSet rs = null;
        try {
            rs = st.executeQuery(query);
            Product product;
            while(rs.next()){
//                product = new Product(rs.getInt("ProductId"),rs.getString("Name"),rs.getString("Category"),
//                    rs.getString("Company"),rs.getFloat("PurchaseCost"),rs.getInt("Quantity"),
//                    rs.getDate("InhouseDate").toString(),rs.getBytes("Image"),rs.getString("Supplier"),rs.getString("Description"));
                    product = new Product(rs.getInt("ProductId"),rs.getInt("Quantity"),rs.getFloat("PurchaseCost"));
                products.add(product);
            }
        } catch (SQLException ex) {
           // Logger.getLogger(HomeForm.class.getName()).log(Level.SEVERE, null, ex);
        }
        finally{
            try {
                rs.close();
                st.close();
                con.close();
            } catch (SQLException e) {
            }
        }
        return products;
    }
    public void searchItemsByCompany(String c){
        PreparedStatement pst = null;
        Connection con = DbConnector.ConnectDB();
        ResultSet rs = null; 
        try {
         String sql = "SELECT * FROM products WHERE Company = '"+c+"'"; 
         pst = con.prepareStatement(sql);
         rs = pst.executeQuery();
         products_tbl.setModel(DbUtils.resultSetToTableModel(rs));
        } catch (SQLException e) {
            JOptionPane.showMessageDialog(null, e);
        } finally{
            try {
                rs.close();
                pst.close();
                con.close();
            } catch (SQLException e) {
            
            }
        }
    }
    public void searchItemsById(int id){
        PreparedStatement pst = null;
        Connection con = DbConnector.ConnectDB();
        ResultSet rs = null;
        try {
         String sql = "SELECT * FROM products WHERE ProductId = '"+id+"'"; 
         pst = con.prepareStatement(sql);
         rs = pst.executeQuery();
            products_tbl.setModel(DbUtils.resultSetToTableModel(rs));
            rs = pst.executeQuery();
            if (rs.next()) {
                
                int productId = rs.getInt("ProductId");
                //id_lbl.setText(Integer.toString(productId));
                String name = rs.getString("Name");
                //name_txt.setText(name);
                String cat = rs.getString("Category");
                //cat_cmb.setSelectedItem((String)cat);
                String com = rs.getString("Company");
                //com_cmb.setSelectedItem((String)com);
                float pCost = rs.getFloat("PurchaseCost");
               // pCost_txt.setText(Float.toString(pCost));
                int qty = rs.getInt("Quantity");
                //qty_txt.setText(Integer.toString(qty));
                String dateValue = rs.getString("InhouseDate");
               // java.util.Date date = new SimpleDateFormat("yyyy-MM-dd").parse(dateValue);
               // date_choose.setDate(date);
                byte[] imageData = rs.getBytes("Image");
                img_lbl.setIcon(resizeImage(null, imageData,img_lbl.getWidth(), img_lbl.getHeight(),Image.SCALE_SMOOTH));
                String supplier = rs.getString("Supplier");
                //sup_txt.setText(supplier);
                String des = rs.getString("Description");
                //des_txt.setText(des);
                String tk = "৳";
                itemInfo_lbl.setText(productId+".Name:"+name+", Price:"+tk+""+Float.toString(pCost)+",Qty:"+Integer.toString(qty)+",Total Price:"+tk+""+Float.toString((float)(pCost * qty)));
                if (qty != 0) {
                    availableCheckBox.setSelected(true);
                    jCheckBox2.setSelected(false);
                }else{
                    availableCheckBox.setSelected(false);
                    jCheckBox2.setSelected(true);
                }  
                
                
            }

        
        } catch (SQLException e) {
            JOptionPane.showMessageDialog(null, e);
        } finally{
            try {
                rs.close();
                pst.close();
                con.close();
            } catch (SQLException e) {
            
            }
        }
    }
    public void searchItemsByGetterQty(int qty){
        PreparedStatement pst = null;
        Connection con = DbConnector.ConnectDB();
        ResultSet rs = null;
        try {
         String sql = "SELECT * FROM products WHERE Quantity >= '"+qty+"'"; 
         pst = con.prepareStatement(sql);
         rs = pst.executeQuery();
         products_tbl.setModel(DbUtils.resultSetToTableModel(rs));
         
        
        } catch (SQLException e) {
            JOptionPane.showMessageDialog(null, e);
        } finally{
            try {
                rs.close();
                pst.close();
                con.close();
            } catch (SQLException e) {
            
            }
        }
    }
    public void searchItemsByLowerQty(int qty){
        PreparedStatement pst = null;
        Connection con = DbConnector.ConnectDB();
        ResultSet rs = null;
        try {
         String sql = "SELECT * FROM products WHERE Quantity <= '"+qty+"'"; 
         pst = con.prepareStatement(sql);
         rs = pst.executeQuery();
         products_tbl.setModel(DbUtils.resultSetToTableModel(rs));
         
        
        } catch (SQLException e) {
            JOptionPane.showMessageDialog(null, e);
        } finally{
            try {
                rs.close();
                pst.close();
                con.close();
            } catch (SQLException e) {
            
            }
        }
    }
    public void showSelectedProduct(int index) throws SQLException{
        Connection con = DbConnector.ConnectDB();
        PreparedStatement pst = null;
        ResultSet rs = null;
        try {
            String sql = "SELECT * FROM products WHERE ProductId = '"+getAllProducts().get(index).getId()+"'"; 
            pst = con.prepareStatement(sql);
            rs = pst.executeQuery();
            products_tbl.setModel(DbUtils.resultSetToTableModel(rs));
        
        } catch (SQLException e) {
        }
 
        img_lbl.setIcon(resizeImage(null, getAllProducts().get(index).getPicture(),img_lbl.getWidth(), img_lbl.getHeight(),Image.SCALE_SMOOTH));
        int id = getAllProducts().get(index).getId();
        float totalPrice = getAllProducts().get(index).getBuyingPrice() * getAllProducts().get(index).getQty();
        
        if (getAllProducts().get(index).getQty() > 0) {
            availableCheckBox.setSelected(true);
            jCheckBox2.setSelected(false);
        }
        else{
            availableCheckBox.setSelected(false);
            jCheckBox2.setSelected(true);
        }
        itemInfo_lbl.setText(id+". Name:"+getAllProducts().get(index).getName()+", Qty:"+Integer.toString(getAllProducts().get(index).getQty())+",Price:৳"+Float.toString(getAllProducts().get(index).getBuyingPrice())+",Total Price:৳"+totalPrice);
    }
    private ArrayList<Product> getAllProducts() throws SQLException{
        ArrayList<Product> products = new ArrayList<>();
        Connection con = DbConnector.ConnectDB();
        String query  = "SELECT * FROM products";
        Statement st = con.createStatement();
        ResultSet rs = null;
        try {
            rs = st.executeQuery(query);
            Product product;
            while(rs.next()){
                product = new Product(rs.getInt("ProductId"),rs.getString("Name"),rs.getString("Category"),
                    rs.getString("Company"),rs.getFloat("PurchaseCost"),rs.getInt("Quantity"),
                    rs.getDate("InhouseDate").toString(),rs.getBytes("Image"),rs.getString("Supplier"),rs.getString("Description"));
                products.add(product);
            }
        } catch (SQLException ex) {
            //Logger.getLogger(HomeForm.class.getName()).log(Level.SEVERE, null, ex);
        }
        finally{
            try {
                rs.close();
                st.close();
                con.close();
            } catch (SQLException e) {
            }
        }
        return products;
    }
    private ArrayList<Product> getAllDateWiseInhouseItems(String fDate,String tDate) throws SQLException{
        ArrayList<Product> items = new ArrayList<>();
        Connection con = DbConnector.ConnectDB();
        String query  = "SELECT * FROM products WHERE InhouseDate >= '"+fDate+"' AND InhouseDate <= '"+tDate+"'";
        Statement st = con.createStatement();
        ResultSet rs = null;
        try {
            rs = st.executeQuery(query);
            
            Product product;
            while(rs.next()){
//                product = new Product(rs.getInt("ProductId"),rs.getString("Name"),rs.getString("Category"),
//                    rs.getString("Company"),rs.getFloat("PurchaseCost"),rs.getInt("Quantity"),
//                    rs.getDate("InhouseDate").toString(),rs.getBytes("Image"),rs.getString("Supplier"),rs.getString("Description"));
                    product = new Product(rs.getInt("ProductId"),rs.getInt("Quantity"),rs.getFloat("PurchaseCost"));
                items.add(product);
            }
        } catch (SQLException ex) {
            //Logger.getLogger(HomeForm.class.getName()).log(Level.SEVERE, null, ex);
        }
        finally{
            try {
                rs.close();
                st.close();
                con.close();
            } catch (SQLException e) {
            }
        }
        return items;
    }
    private boolean checkDates(){
        String fString = ((JTextField)fromDate_chooser.getDateEditor().getUiComponent()).getText();
        String tString = ((JTextField)toDate_chooser.getDateEditor().getUiComponent()).getText();
        if (fString.equals("") || tString.equals("")) {
            JOptionPane.showMessageDialog(null, "Select date.", "Warning!", JOptionPane.ERROR_MESSAGE);
            return false;
        }else return true;
    }
    private void searchProductsFromDateToDate(String fDate,String tDate){
        PreparedStatement pst = null;
        Connection con = DbConnector.ConnectDB();
        ResultSet rs = null;
        try {
            String sql = "SELECT * FROM products WHERE InhouseDate >= '"+fDate+"' AND InhouseDate <= '"+tDate+"'"; 
            pst = con.prepareStatement(sql);
            rs = pst.executeQuery();
            products_tbl.setModel(DbUtils.resultSetToTableModel(rs));
        } catch (SQLException e) {
        }
    }
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JCheckBox availableCheckBox;
    private javax.swing.JComboBox<String> company_cmb;
    private com.toedter.calendar.JDateChooser fromDate_chooser;
    private javax.swing.JLabel grandTotal_lbl;
    private javax.swing.JTextField id_txt;
    private javax.swing.JLabel img_lbl;
    private javax.swing.JLabel itemInfo_lbl;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton10;
    private javax.swing.JButton jButton11;
    private javax.swing.JButton jButton12;
    private javax.swing.JButton jButton13;
    private javax.swing.JButton jButton14;
    private javax.swing.JButton jButton15;
    private javax.swing.JButton jButton16;
    private javax.swing.JButton jButton17;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JButton jButton4;
    private javax.swing.JButton jButton5;
    private javax.swing.JButton jButton6;
    private javax.swing.JButton jButton7;
    private javax.swing.JButton jButton8;
    private javax.swing.JButton jButton9;
    private javax.swing.JCheckBox jCheckBox2;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextField name_txt;
    private javax.swing.JTable products_tbl;
    private javax.swing.JTextField quantity_txt;
    private javax.swing.JButton searchByDate_btn;
    private com.toedter.calendar.JDateChooser toDate_chooser;
    private javax.swing.JLabel totalQty_lbl;
    private javax.swing.JComboBox<String> type_cmb;
    // End of variables declaration//GEN-END:variables
}
