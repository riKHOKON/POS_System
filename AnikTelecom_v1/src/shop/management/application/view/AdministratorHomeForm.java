/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package shop.management.application.view;

import shop.management.application.view.*;
import java.awt.Font;
import java.awt.FontMetrics;
import java.awt.Graphics;
import java.awt.Graphics2D;
import java.awt.HeadlessException;
import java.awt.Image;
import java.awt.Toolkit;
import java.awt.print.PageFormat;
import java.awt.print.Paper;
import java.awt.print.Printable;
import static java.awt.print.Printable.NO_SUCH_PAGE;
import static java.awt.print.Printable.PAGE_EXISTS;
import java.awt.print.PrinterException;
import java.awt.print.PrinterJob;
import static java.lang.Thread.sleep;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.GregorianCalendar;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.ImageIcon;
import javax.swing.JFrame;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import net.proteanit.sql.DbUtils;
import shop.management.application.DbConnector;
import shop.management.application.DbConnector;
import shop.management.application.ShopManagementApplication;
import shop.management.application.model.Bill;
import shop.management.application.model.Item;
import shop.management.application.model.Product;
import shop.management.application.model.User;

/**
 *
 * @author rIslam
 */
public final class AdministratorHomeForm extends javax.swing.JFrame {

    /**
     * Creates new form Home
     */
    private static User currentUser = new User();
    private int pos = 0;
    private final Bill bill;
    private float due = 0;
    public AdministratorHomeForm() {
        //clock();
        initComponents();
        this.setExtendedState(JFrame.MAXIMIZED_BOTH);
        updateItemTable();
        fillComboBoxWithName();
        fillComboBoxWithCategory();
        fillComboBoxWithCompany();
        bill = new Bill();
        Calendar now = Calendar.getInstance();
        sellDate_chooser.setDateFormatString("yyyy-MM-dd");
        sellDate_chooser.setDate(now.getTime());
        deadLine.setDateFormatString("yyyy-MM-dd");
        deadLine.setDate(now.getTime());
        fillComboBoxWithUserName();
        userName_lbl.setText("**************************>>>> Welcome ! "+currentUser.getFristName()+" "+currentUser.getLastName()+" <<<<**************************");
        //setIcon();
    }
    public AdministratorHomeForm(User user) {
       // clock();
        initComponents();
        this.setExtendedState(JFrame.MAXIMIZED_BOTH);
        updateItemTable();
        fillComboBoxWithName();
        fillComboBoxWithCategory();
        fillComboBoxWithCompany();
        bill = new Bill();
        Calendar now = Calendar.getInstance();
        sellDate_chooser.setDateFormatString("yyyy-MM-dd");
        sellDate_chooser.setDate(now.getTime());
        fillComboBoxWithUserName();
        currentUser = user;
        userName_lbl.setText("**************************>>>> Welcome ! "+currentUser.getFristName()+" "+currentUser.getLastName()+" <<<<**************************");
        //setIcon();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jMenuItem8 = new javax.swing.JMenuItem();
        jMenuItem10 = new javax.swing.JMenuItem();
        jPanel5 = new javax.swing.JPanel();
        jPanel1 = new javax.swing.JPanel();
        jToolBar1 = new javax.swing.JToolBar();
        jButton1 = new javax.swing.JButton();
        jSeparator3 = new javax.swing.JToolBar.Separator();
        jButton2 = new javax.swing.JButton();
        jSeparator4 = new javax.swing.JToolBar.Separator();
        jButton3 = new javax.swing.JButton();
        jSeparator5 = new javax.swing.JToolBar.Separator();
        jButton4 = new javax.swing.JButton();
        jSeparator6 = new javax.swing.JToolBar.Separator();
        jButton5 = new javax.swing.JButton();
        jSeparator9 = new javax.swing.JToolBar.Separator();
        jPanel3 = new javax.swing.JPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        billItems_tbl = new javax.swing.JTable();
        jPanel9 = new javax.swing.JPanel();
        update_btn = new javax.swing.JButton();
        billItemPrice_lbl = new javax.swing.JLabel();
        n_lbl = new javax.swing.JLabel();
        billItemPrice_txt = new javax.swing.JTextField();
        billItemPrice_lbl1 = new javax.swing.JLabel();
        billItemQty_txt = new javax.swing.JTextField();
        jLabel8 = new javax.swing.JLabel();
        jPanel10 = new javax.swing.JPanel();
        jLabel9 = new javax.swing.JLabel();
        jLabel10 = new javax.swing.JLabel();
        customerName_txt = new javax.swing.JTextField();
        customerPhone_txt = new javax.swing.JTextField();
        jLabel11 = new javax.swing.JLabel();
        sellDate_chooser = new com.toedter.calendar.JDateChooser();
        jLabel12 = new javax.swing.JLabel();
        payment_cmb = new javax.swing.JComboBox<>();
        jLabel13 = new javax.swing.JLabel();
        served_cmb = new javax.swing.JComboBox<>();
        index_lbl = new javax.swing.JLabel();
        jLabel15 = new javax.swing.JLabel();
        jLabel16 = new javax.swing.JLabel();
        paidAmount_txt = new javax.swing.JTextField();
        deadLine = new com.toedter.calendar.JDateChooser();
        jSeparator10 = new javax.swing.JSeparator();
        due_btn = new javax.swing.JButton();
        jButton7 = new javax.swing.JButton();
        ok_btn = new javax.swing.JButton();
        grandTotal_txt = new javax.swing.JTextField();
        jLabel14 = new javax.swing.JLabel();
        jButton6 = new javax.swing.JButton();
        jPanel2 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        products_tbl = new javax.swing.JTable();
        jLabel3 = new javax.swing.JLabel();
        name_cmb = new javax.swing.JComboBox<>();
        type_cmb = new javax.swing.JComboBox<>();
        company_cmb = new javax.swing.JComboBox<>();
        nameSearch_btn = new javax.swing.JButton();
        catSearch_btn = new javax.swing.JButton();
        searchByCompany_btn = new javax.swing.JButton();
        refresh_btn = new javax.swing.JButton();
        itemInfo_lbl = new javax.swing.JLabel();
        jPanel4 = new javax.swing.JPanel();
        jPanel6 = new javax.swing.JPanel();
        img_lbl = new javax.swing.JLabel();
        id_lbl = new javax.swing.JLabel();
        name_lbl = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();
        availableQty_txt = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        purchaseCost_txt = new javax.swing.JTextField();
        availableCheckBox = new javax.swing.JCheckBox();
        stockOutCheckBox = new javax.swing.JCheckBox();
        totalPrice_lbl = new javax.swing.JLabel();
        jPanel7 = new javax.swing.JPanel();
        next_btn = new javax.swing.JButton();
        frist_btn = new javax.swing.JButton();
        pre_btn = new javax.swing.JButton();
        search_btn = new javax.swing.JButton();
        name_txt = new javax.swing.JTextField();
        last_btn = new javax.swing.JButton();
        jPanel8 = new javax.swing.JPanel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        sellingPrice_txt = new javax.swing.JTextField();
        qtyOnBill_txt = new javax.swing.JTextField();
        addToBill_btn = new javax.swing.JButton();
        jLabel6 = new javax.swing.JLabel();
        showAll_btn = new javax.swing.JButton();
        clear_btn = new javax.swing.JButton();
        countBillItems_btn = new javax.swing.JButton();
        clear_btn2 = new javax.swing.JButton();
        jLabel7 = new javax.swing.JLabel();
        userName_lbl = new javax.swing.JLabel();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu1 = new javax.swing.JMenu();
        stockCheck_mnu = new javax.swing.JMenuItem();
        jMenuItem3 = new javax.swing.JMenuItem();
        jMenuItem2 = new javax.swing.JMenuItem();
        jSeparator1 = new javax.swing.JPopupMenu.Separator();
        jSeparator2 = new javax.swing.JPopupMenu.Separator();
        jMenuItem4 = new javax.swing.JMenuItem();
        jMenuItem5 = new javax.swing.JMenuItem();
        jMenu4 = new javax.swing.JMenu();
        jMenuItem6 = new javax.swing.JMenuItem();
        jMenuItem7 = new javax.swing.JMenuItem();
        jSeparator8 = new javax.swing.JPopupMenu.Separator();
        jMenuItem11 = new javax.swing.JMenuItem();
        jMenu5 = new javax.swing.JMenu();
        jMenuItem9 = new javax.swing.JMenuItem();
        jSeparator7 = new javax.swing.JPopupMenu.Separator();
        jMenu2 = new javax.swing.JMenu();
        jMenuItem1 = new javax.swing.JMenuItem();
        jMenu3 = new javax.swing.JMenu();
        time_mnu_lbl = new javax.swing.JMenu();

        jMenuItem8.setText("jMenuItem8");

        jMenuItem10.setText("jMenuItem10");

        setDefaultCloseOperation(javax.swing.WindowConstants.DO_NOTHING_ON_CLOSE);
        setTitle("ADMINISTRATOR HOME");

        jPanel5.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(255, 0, 0), 2, true));

        jPanel1.setBackground(new java.awt.Color(204, 204, 204));
        jPanel1.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 0, 0), 2, true));

        jToolBar1.setRollover(true);

        jButton1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/shop/management/application/res/database-check-icon.png"))); // NOI18N
        jButton1.setFocusable(false);
        jButton1.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        jButton1.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });
        jToolBar1.add(jButton1);

        jSeparator3.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 0, 0), 1, true));
        jToolBar1.add(jSeparator3);

        jButton2.setIcon(new javax.swing.ImageIcon(getClass().getResource("/shop/management/application/res/cost-icon.png"))); // NOI18N
        jButton2.setFocusable(false);
        jButton2.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        jButton2.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });
        jToolBar1.add(jButton2);

        jSeparator4.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 0, 0), 1, true));
        jToolBar1.add(jSeparator4);

        jButton3.setIcon(new javax.swing.ImageIcon(getClass().getResource("/shop/management/application/res/invoice-icon.png"))); // NOI18N
        jButton3.setFocusable(false);
        jButton3.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        jButton3.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });
        jToolBar1.add(jButton3);

        jSeparator5.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 0, 0), 1, true));
        jToolBar1.add(jSeparator5);

        jButton4.setIcon(new javax.swing.ImageIcon(getClass().getResource("/shop/management/application/res/report.png"))); // NOI18N
        jButton4.setFocusable(false);
        jButton4.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        jButton4.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        jToolBar1.add(jButton4);

        jSeparator6.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 0, 0), 1, true));
        jToolBar1.add(jSeparator6);

        jButton5.setIcon(new javax.swing.ImageIcon(getClass().getResource("/shop/management/application/res/allCat.png"))); // NOI18N
        jButton5.setFocusable(false);
        jButton5.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        jButton5.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        jButton5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton5ActionPerformed(evt);
            }
        });
        jToolBar1.add(jButton5);
        jToolBar1.add(jSeparator9);

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jToolBar1, javax.swing.GroupLayout.DEFAULT_SIZE, 521, Short.MAX_VALUE)
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addComponent(jToolBar1, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 2, Short.MAX_VALUE))
        );

        jPanel3.setBackground(new java.awt.Color(204, 204, 204));
        jPanel3.setBorder(javax.swing.BorderFactory.createTitledBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 255, 51), 2, true), "Bill details", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Consolas", 1, 12))); // NOI18N

        billItems_tbl.setFont(new java.awt.Font("Consolas", 1, 14)); // NOI18N
        billItems_tbl.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "No.", "Name", "Price", "Quantity", "Total"
            }
        ));
        billItems_tbl.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                billItems_tblMouseClicked(evt);
            }
        });
        jScrollPane2.setViewportView(billItems_tbl);

        jPanel9.setBackground(new java.awt.Color(153, 255, 153));

        update_btn.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        update_btn.setIcon(new javax.swing.ImageIcon(getClass().getResource("/shop/management/application/res/refresh-icon.png"))); // NOI18N
        update_btn.setText("Update");
        update_btn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                update_btnActionPerformed(evt);
            }
        });

        billItemPrice_lbl.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        billItemPrice_lbl.setText("Qty :");

        n_lbl.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        n_lbl.setText("Name :");

        billItemPrice_txt.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        billItemPrice_txt.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        billItemPrice_txt.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 0, 0), 1, true));

        billItemPrice_lbl1.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        billItemPrice_lbl1.setText("Price :");

        billItemQty_txt.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        billItemQty_txt.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        billItemQty_txt.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 0, 0), 1, true));

        javax.swing.GroupLayout jPanel9Layout = new javax.swing.GroupLayout(jPanel9);
        jPanel9.setLayout(jPanel9Layout);
        jPanel9Layout.setHorizontalGroup(
            jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel9Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(n_lbl, javax.swing.GroupLayout.PREFERRED_SIZE, 283, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(billItemPrice_lbl1, javax.swing.GroupLayout.PREFERRED_SIZE, 51, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(billItemPrice_txt, javax.swing.GroupLayout.PREFERRED_SIZE, 84, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(billItemPrice_lbl)
                .addGap(18, 18, 18)
                .addComponent(billItemQty_txt, javax.swing.GroupLayout.PREFERRED_SIZE, 51, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(30, 30, 30)
                .addComponent(update_btn, javax.swing.GroupLayout.PREFERRED_SIZE, 97, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(79, Short.MAX_VALUE))
        );
        jPanel9Layout.setVerticalGroup(
            jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel9Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(update_btn, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(billItemPrice_lbl, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(billItemPrice_lbl1, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(billItemQty_txt)
                        .addComponent(billItemPrice_txt))
                    .addComponent(n_lbl, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );

        jLabel8.setText("Grand Total :");

        jPanel10.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 0, 0), 1, true));

        jLabel9.setText("Customer Name :");

        jLabel10.setText("Customer Phone :");

        customerName_txt.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        customerName_txt.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        customerName_txt.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 0, 0), 1, true));

        customerPhone_txt.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        customerPhone_txt.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        customerPhone_txt.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 0, 0), 1, true));

        jLabel11.setText("Date :");

        sellDate_chooser.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 0, 0), 1, true));
        sellDate_chooser.setDateFormatString("yyyy-MM-dd");
        sellDate_chooser.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N

        jLabel12.setText("Payment Type :");

        payment_cmb.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        payment_cmb.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Cash", "Due" }));
        payment_cmb.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 0, 0), 1, true));

        jLabel13.setText("Served By :");

        served_cmb.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        served_cmb.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 0, 0), 1, true));

        index_lbl.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N

        jLabel15.setText("Paid Amount :");

        jLabel16.setText("Dead Line :");

        paidAmount_txt.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        paidAmount_txt.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 0, 0), 1, true));

        deadLine.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 0, 0), 1, true));

        due_btn.setIcon(new javax.swing.ImageIcon(getClass().getResource("/shop/management/application/res/tick-octagon-frame-icon.png"))); // NOI18N
        due_btn.setText("with due");
        due_btn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                due_btnActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel10Layout = new javax.swing.GroupLayout(jPanel10);
        jPanel10.setLayout(jPanel10Layout);
        jPanel10Layout.setHorizontalGroup(
            jPanel10Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel10Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel10Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(jPanel10Layout.createSequentialGroup()
                        .addComponent(jLabel9)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(customerName_txt))
                    .addGroup(jPanel10Layout.createSequentialGroup()
                        .addGroup(jPanel10Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel10)
                            .addComponent(jLabel11))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(jPanel10Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(customerPhone_txt)
                            .addComponent(sellDate_chooser, javax.swing.GroupLayout.DEFAULT_SIZE, 173, Short.MAX_VALUE))))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel10Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel10Layout.createSequentialGroup()
                        .addComponent(jLabel13, javax.swing.GroupLayout.PREFERRED_SIZE, 88, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(jPanel10Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(served_cmb, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addGroup(jPanel10Layout.createSequentialGroup()
                                .addComponent(jSeparator10, javax.swing.GroupLayout.PREFERRED_SIZE, 357, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(0, 0, Short.MAX_VALUE))))
                    .addGroup(jPanel10Layout.createSequentialGroup()
                        .addGroup(jPanel10Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel10Layout.createSequentialGroup()
                                .addComponent(jLabel12, javax.swing.GroupLayout.PREFERRED_SIZE, 88, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(payment_cmb, javax.swing.GroupLayout.PREFERRED_SIZE, 138, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(81, 81, 81)
                                .addComponent(index_lbl, javax.swing.GroupLayout.PREFERRED_SIZE, 47, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(jPanel10Layout.createSequentialGroup()
                                .addGap(92, 92, 92)
                                .addGroup(jPanel10Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(jLabel16, javax.swing.GroupLayout.PREFERRED_SIZE, 67, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jLabel15))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(jPanel10Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(paidAmount_txt)
                                    .addComponent(deadLine, javax.swing.GroupLayout.DEFAULT_SIZE, 148, Short.MAX_VALUE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(due_btn)))
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addGap(19, 19, 19))
        );
        jPanel10Layout.setVerticalGroup(
            jPanel10Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel10Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel10Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel10Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(payment_cmb, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(index_lbl, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel10Layout.createSequentialGroup()
                        .addGroup(jPanel10Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel9, javax.swing.GroupLayout.PREFERRED_SIZE, 17, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(customerName_txt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel12))
                        .addGap(11, 11, 11)
                        .addGroup(jPanel10Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel10)
                            .addComponent(customerPhone_txt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel13)
                            .addComponent(served_cmb, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addGap(11, 11, 11)
                .addGroup(jPanel10Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel10Layout.createSequentialGroup()
                        .addGroup(jPanel10Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jLabel11)
                            .addComponent(sellDate_chooser, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(jPanel10Layout.createSequentialGroup()
                        .addComponent(jSeparator10)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel10Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(jPanel10Layout.createSequentialGroup()
                                .addGroup(jPanel10Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(deadLine, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jLabel16))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(jPanel10Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(paidAmount_txt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jLabel15)))
                            .addComponent(due_btn, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
                .addContainerGap())
        );

        jButton7.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jButton7.setIcon(new javax.swing.ImageIcon(getClass().getResource("/shop/management/application/res/cross-circle-frame-icon.png"))); // NOI18N
        jButton7.setText("Cancel");
        jButton7.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton7ActionPerformed(evt);
            }
        });

        ok_btn.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        ok_btn.setIcon(new javax.swing.ImageIcon(getClass().getResource("/shop/management/application/res/tick-octagon-frame-icon.png"))); // NOI18N
        ok_btn.setText("Ok");
        ok_btn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ok_btnActionPerformed(evt);
            }
        });

        grandTotal_txt.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        grandTotal_txt.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        grandTotal_txt.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 0, 0), 1, true));

        jLabel14.setFont(new java.awt.Font("Tw Cen MT Condensed", 0, 14)); // NOI18N
        jLabel14.setText("0120.rashedul@gmail.com");

        jButton6.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jButton6.setIcon(new javax.swing.ImageIcon(getClass().getResource("/shop/management/application/res/clear.png"))); // NOI18N
        jButton6.setText("Close");
        jButton6.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton6ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane2)
            .addComponent(jPanel9, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(jPanel10, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel3Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jLabel8, javax.swing.GroupLayout.PREFERRED_SIZE, 83, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(grandTotal_txt, javax.swing.GroupLayout.PREFERRED_SIZE, 147, javax.swing.GroupLayout.PREFERRED_SIZE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel3Layout.createSequentialGroup()
                .addComponent(jButton6)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jLabel14, javax.swing.GroupLayout.PREFERRED_SIZE, 170, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(54, 54, 54)
                .addComponent(jButton7)
                .addGap(31, 31, 31)
                .addComponent(ok_btn, javax.swing.GroupLayout.PREFERRED_SIZE, 93, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(185, 185, 185))
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 135, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(1, 1, 1)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel8, javax.swing.GroupLayout.PREFERRED_SIZE, 19, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(grandTotal_txt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel9, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel10, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jButton7)
                        .addComponent(ok_btn))
                    .addComponent(jLabel14, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jButton6, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(0, 0, Short.MAX_VALUE))
        );

        jPanel2.setBackground(new java.awt.Color(204, 204, 204));
        jPanel2.setBorder(javax.swing.BorderFactory.createTitledBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 204, 51), 2, true), "Items", javax.swing.border.TitledBorder.RIGHT, javax.swing.border.TitledBorder.DEFAULT_POSITION));

        products_tbl.setFont(new java.awt.Font("Consolas", 1, 14)); // NOI18N
        products_tbl.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {

            }
        ));
        products_tbl.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                products_tblMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(products_tbl);

        jLabel3.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabel3.setText("|||[ Search ]|||");

        name_cmb.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N

        type_cmb.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N

        company_cmb.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N

        nameSearch_btn.setIcon(new javax.swing.ImageIcon(getClass().getResource("/shop/management/application/res/zoom-icon.png"))); // NOI18N
        nameSearch_btn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                nameSearch_btnActionPerformed(evt);
            }
        });

        catSearch_btn.setIcon(new javax.swing.ImageIcon(getClass().getResource("/shop/management/application/res/zoom-icon.png"))); // NOI18N
        catSearch_btn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                catSearch_btnActionPerformed(evt);
            }
        });

        searchByCompany_btn.setIcon(new javax.swing.ImageIcon(getClass().getResource("/shop/management/application/res/zoom-icon.png"))); // NOI18N
        searchByCompany_btn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                searchByCompany_btnActionPerformed(evt);
            }
        });

        refresh_btn.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        refresh_btn.setIcon(new javax.swing.ImageIcon(getClass().getResource("/shop/management/application/res/refresh-icon.png"))); // NOI18N
        refresh_btn.setText("Resfesh");
        refresh_btn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                refresh_btnActionPerformed(evt);
            }
        });

        itemInfo_lbl.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        itemInfo_lbl.setText("Item not selected.");

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addComponent(refresh_btn)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(itemInfo_lbl, javax.swing.GroupLayout.DEFAULT_SIZE, 475, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jLabel3)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(name_cmb, javax.swing.GroupLayout.PREFERRED_SIZE, 233, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(nameSearch_btn, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(type_cmb, javax.swing.GroupLayout.PREFERRED_SIZE, 148, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(catSearch_btn, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(company_cmb, javax.swing.GroupLayout.PREFERRED_SIZE, 133, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(searchByCompany_btn, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(5, 5, 5))
            .addComponent(jScrollPane1)
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 194, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(type_cmb, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(company_cmb, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jLabel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(name_cmb))
                    .addComponent(searchByCompany_btn, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                    .addComponent(catSearch_btn, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                    .addComponent(nameSearch_btn, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                    .addComponent(refresh_btn, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(itemInfo_lbl, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
        );

        jPanel4.setBackground(new java.awt.Color(204, 204, 204));
        jPanel4.setBorder(javax.swing.BorderFactory.createTitledBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 255, 51), 2, true), "Select Item", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Consolas", 1, 12))); // NOI18N

        jPanel6.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 255, 255)));

        img_lbl.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        img_lbl.setText("Item not selected.");
        img_lbl.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(255, 0, 0)));

        id_lbl.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        id_lbl.setText("ID :");

        name_lbl.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        name_lbl.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        name_lbl.setText("Name :");

        jLabel1.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabel1.setText("Available Quantity :");

        availableQty_txt.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        availableQty_txt.setHorizontalAlignment(javax.swing.JTextField.CENTER);

        jLabel2.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabel2.setText("Purchase Cost :");

        purchaseCost_txt.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        purchaseCost_txt.setHorizontalAlignment(javax.swing.JTextField.CENTER);

        availableCheckBox.setText("Available");

        stockOutCheckBox.setText("Stock out");

        totalPrice_lbl.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        totalPrice_lbl.setText("Total Price :");

        javax.swing.GroupLayout jPanel6Layout = new javax.swing.GroupLayout(jPanel6);
        jPanel6.setLayout(jPanel6Layout);
        jPanel6Layout.setHorizontalGroup(
            jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel6Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(img_lbl, javax.swing.GroupLayout.PREFERRED_SIZE, 255, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel6Layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(name_lbl, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addGroup(jPanel6Layout.createSequentialGroup()
                                .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(id_lbl, javax.swing.GroupLayout.PREFERRED_SIZE, 86, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGroup(jPanel6Layout.createSequentialGroup()
                                        .addComponent(jLabel2)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addComponent(purchaseCost_txt, javax.swing.GroupLayout.PREFERRED_SIZE, 88, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGroup(jPanel6Layout.createSequentialGroup()
                                        .addComponent(jLabel1)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                        .addComponent(availableQty_txt, javax.swing.GroupLayout.PREFERRED_SIZE, 88, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addComponent(totalPrice_lbl, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                .addGap(0, 0, Short.MAX_VALUE))))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel6Layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(stockOutCheckBox)
                            .addComponent(availableCheckBox))
                        .addGap(53, 53, 53))))
        );
        jPanel6Layout.setVerticalGroup(
            jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel6Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(img_lbl, javax.swing.GroupLayout.PREFERRED_SIZE, 255, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(totalPrice_lbl))
                    .addGroup(jPanel6Layout.createSequentialGroup()
                        .addComponent(id_lbl)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(name_lbl)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel2)
                            .addComponent(purchaseCost_txt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel1)
                            .addComponent(availableQty_txt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(53, 53, 53)
                        .addComponent(availableCheckBox)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(stockOutCheckBox)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jPanel7.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(51, 0, 255)), "Browse & Search", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Consolas", 1, 12))); // NOI18N

        next_btn.setIcon(new javax.swing.ImageIcon(getClass().getResource("/shop/management/application/res/next.png"))); // NOI18N
        next_btn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                next_btnActionPerformed(evt);
            }
        });

        frist_btn.setIcon(new javax.swing.ImageIcon(getClass().getResource("/shop/management/application/res/frist.png"))); // NOI18N
        frist_btn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                frist_btnActionPerformed(evt);
            }
        });

        pre_btn.setIcon(new javax.swing.ImageIcon(getClass().getResource("/shop/management/application/res/pre.png"))); // NOI18N
        pre_btn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                pre_btnActionPerformed(evt);
            }
        });

        search_btn.setIcon(new javax.swing.ImageIcon(getClass().getResource("/shop/management/application/res/search-icon.png"))); // NOI18N
        search_btn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                search_btnActionPerformed(evt);
            }
        });

        name_txt.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        name_txt.setHorizontalAlignment(javax.swing.JTextField.CENTER);

        last_btn.setIcon(new javax.swing.ImageIcon(getClass().getResource("/shop/management/application/res/last.png"))); // NOI18N
        last_btn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                last_btnActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel7Layout = new javax.swing.GroupLayout(jPanel7);
        jPanel7.setLayout(jPanel7Layout);
        jPanel7Layout.setHorizontalGroup(
            jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel7Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addComponent(name_txt)
                    .addGroup(jPanel7Layout.createSequentialGroup()
                        .addComponent(frist_btn, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(next_btn, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(pre_btn, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(search_btn, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(last_btn, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel7Layout.setVerticalGroup(
            jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel7Layout.createSequentialGroup()
                .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(next_btn)
                        .addComponent(frist_btn)
                        .addComponent(pre_btn))
                    .addComponent(last_btn))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(search_btn, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(name_txt))
                .addGap(0, 0, Short.MAX_VALUE))
        );

        jPanel8.setBorder(javax.swing.BorderFactory.createTitledBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 0, 0), 1, true), "Manage Cart"));

        jLabel4.setText("Selling Price : ৳");

        jLabel5.setText("Quantity :");

        sellingPrice_txt.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        sellingPrice_txt.setHorizontalAlignment(javax.swing.JTextField.CENTER);

        qtyOnBill_txt.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        qtyOnBill_txt.setHorizontalAlignment(javax.swing.JTextField.CENTER);

        addToBill_btn.setIcon(new javax.swing.ImageIcon(getClass().getResource("/shop/management/application/res/shop-cart-icon.png"))); // NOI18N
        addToBill_btn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addToBill_btnActionPerformed(evt);
            }
        });

        jLabel6.setFont(new java.awt.Font("Tahoma", 3, 11)); // NOI18N
        jLabel6.setText("**********");

        showAll_btn.setIcon(new javax.swing.ImageIcon(getClass().getResource("/shop/management/application/res/showall.png"))); // NOI18N
        showAll_btn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                showAll_btnActionPerformed(evt);
            }
        });

        clear_btn.setIcon(new javax.swing.ImageIcon(getClass().getResource("/shop/management/application/res/clear.png"))); // NOI18N
        clear_btn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                clear_btnActionPerformed(evt);
            }
        });

        countBillItems_btn.setIcon(new javax.swing.ImageIcon(getClass().getResource("/shop/management/application/res/count-icon.png"))); // NOI18N
        countBillItems_btn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                countBillItems_btnActionPerformed(evt);
            }
        });

        clear_btn2.setIcon(new javax.swing.ImageIcon(getClass().getResource("/shop/management/application/res/invoice-icon.png"))); // NOI18N
        clear_btn2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                clear_btn2ActionPerformed(evt);
            }
        });

        jLabel7.setFont(new java.awt.Font("Tahoma", 3, 11)); // NOI18N
        jLabel7.setText("***********");

        javax.swing.GroupLayout jPanel8Layout = new javax.swing.GroupLayout(jPanel8);
        jPanel8.setLayout(jPanel8Layout);
        jPanel8Layout.setHorizontalGroup(
            jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel8Layout.createSequentialGroup()
                .addGroup(jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel4)
                    .addComponent(jLabel5))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(qtyOnBill_txt, javax.swing.GroupLayout.PREFERRED_SIZE, 110, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(sellingPrice_txt, javax.swing.GroupLayout.PREFERRED_SIZE, 110, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(addToBill_btn, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(jPanel8Layout.createSequentialGroup()
                .addComponent(jLabel6)
                .addGap(8, 8, 8)
                .addComponent(clear_btn2, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(countBillItems_btn, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(clear_btn, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(showAll_btn, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel7, javax.swing.GroupLayout.PREFERRED_SIZE, 78, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 8, Short.MAX_VALUE))
        );
        jPanel8Layout.setVerticalGroup(
            jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel8Layout.createSequentialGroup()
                .addGroup(jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(addToBill_btn, javax.swing.GroupLayout.PREFERRED_SIZE, 46, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel8Layout.createSequentialGroup()
                        .addGroup(jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel4)
                            .addComponent(sellingPrice_txt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel5)
                            .addComponent(qtyOnBill_txt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(showAll_btn, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(clear_btn, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(countBillItems_btn, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel6, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(clear_btn2, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel7, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(0, 0, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel6, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel4Layout.createSequentialGroup()
                .addComponent(jPanel7, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel8, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addComponent(jPanel6, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel7, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel8, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
        );

        javax.swing.GroupLayout jPanel5Layout = new javax.swing.GroupLayout(jPanel5);
        jPanel5.setLayout(jPanel5Layout);
        jPanel5Layout.setHorizontalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel5Layout.createSequentialGroup()
                .addGap(0, 0, Short.MAX_VALUE)
                .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jPanel4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(20, 20, 20))
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(userName_lbl, javax.swing.GroupLayout.PREFERRED_SIZE, 555, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );
        jPanel5Layout.setVerticalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(jPanel5Layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(userName_lbl, javax.swing.GroupLayout.PREFERRED_SIZE, 16, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
        );

        jMenu1.setText("File");

        stockCheck_mnu.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_S, java.awt.event.InputEvent.CTRL_MASK));
        stockCheck_mnu.setIcon(new javax.swing.ImageIcon(getClass().getResource("/shop/management/application/res/database-check-icon.png"))); // NOI18N
        stockCheck_mnu.setText("Stock check.");
        stockCheck_mnu.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                stockCheck_mnuActionPerformed(evt);
            }
        });
        jMenu1.add(stockCheck_mnu);

        jMenuItem3.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_E, java.awt.event.InputEvent.CTRL_MASK));
        jMenuItem3.setIcon(new javax.swing.ImageIcon(getClass().getResource("/shop/management/application/res/cost-icon.png"))); // NOI18N
        jMenuItem3.setText("Expenses");
        jMenuItem3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem3ActionPerformed(evt);
            }
        });
        jMenu1.add(jMenuItem3);

        jMenuItem2.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_B, java.awt.event.InputEvent.CTRL_MASK));
        jMenuItem2.setIcon(new javax.swing.ImageIcon(getClass().getResource("/shop/management/application/res/invoice-icon.png"))); // NOI18N
        jMenuItem2.setText("Bills");
        jMenuItem2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem2ActionPerformed(evt);
            }
        });
        jMenu1.add(jMenuItem2);
        jMenu1.add(jSeparator1);
        jMenu1.add(jSeparator2);

        jMenuItem4.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_R, java.awt.event.InputEvent.SHIFT_MASK | java.awt.event.InputEvent.CTRL_MASK));
        jMenuItem4.setIcon(new javax.swing.ImageIcon(getClass().getResource("/shop/management/application/res/report.png"))); // NOI18N
        jMenuItem4.setText("Reports");
        jMenu1.add(jMenuItem4);

        jMenuItem5.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_E, java.awt.event.InputEvent.ALT_MASK));
        jMenuItem5.setIcon(new javax.swing.ImageIcon(getClass().getResource("/shop/management/application/res/exit.png"))); // NOI18N
        jMenuItem5.setText("Exit");
        jMenuItem5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem5ActionPerformed(evt);
            }
        });
        jMenu1.add(jMenuItem5);

        jMenuBar1.add(jMenu1);

        jMenu4.setText("Admin Controls");

        jMenuItem6.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_I, java.awt.event.InputEvent.ALT_MASK | java.awt.event.InputEvent.CTRL_MASK));
        jMenuItem6.setIcon(new javax.swing.ImageIcon(getClass().getResource("/shop/management/application/res/updatedd.png"))); // NOI18N
        jMenuItem6.setText("Manage Items");
        jMenuItem6.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem6ActionPerformed(evt);
            }
        });
        jMenu4.add(jMenuItem6);

        jMenuItem7.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_U, java.awt.event.InputEvent.ALT_MASK));
        jMenuItem7.setIcon(new javax.swing.ImageIcon(getClass().getResource("/shop/management/application/res/searchUser.png"))); // NOI18N
        jMenuItem7.setText("Manage Users");
        jMenuItem7.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem7ActionPerformed(evt);
            }
        });
        jMenu4.add(jMenuItem7);
        jMenu4.add(jSeparator8);

        jMenuItem11.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_C, java.awt.event.InputEvent.CTRL_MASK));
        jMenuItem11.setIcon(new javax.swing.ImageIcon(getClass().getResource("/shop/management/application/res/allCat.png"))); // NOI18N
        jMenuItem11.setText("Add Category or Company");
        jMenuItem11.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem11ActionPerformed(evt);
            }
        });
        jMenu4.add(jMenuItem11);

        jMenuBar1.add(jMenu4);

        jMenu5.setText("Manage Accounts");

        jMenuItem9.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_M, java.awt.event.InputEvent.SHIFT_MASK | java.awt.event.InputEvent.CTRL_MASK));
        jMenuItem9.setText("Manage Accounts");
        jMenuItem9.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem9ActionPerformed(evt);
            }
        });
        jMenu5.add(jMenuItem9);
        jMenu5.add(jSeparator7);

        jMenuBar1.add(jMenu5);

        jMenu2.setText("Edit");

        jMenuItem1.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_P, java.awt.event.InputEvent.CTRL_MASK));
        jMenuItem1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/shop/management/application/res/chooseImg.png"))); // NOI18N
        jMenuItem1.setText("My Profile");
        jMenuItem1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem1ActionPerformed(evt);
            }
        });
        jMenu2.add(jMenuItem1);

        jMenuBar1.add(jMenu2);

        jMenu3.setText("Help");
        jMenu3.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jMenu3MouseClicked(evt);
            }
        });
        jMenu3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenu3ActionPerformed(evt);
            }
        });
        jMenuBar1.add(jMenu3);

        time_mnu_lbl.setText(".................");
        jMenuBar1.add(time_mnu_lbl);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel5, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel5, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void products_tblMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_products_tblMouseClicked
        PreparedStatement pst = null;
        Connection con = DbConnector.ConnectDB();
        ResultSet rs = null;
        int row = products_tbl.getSelectedRow();
        int index = (Integer.parseInt(products_tbl.getModel().getValueAt(row, 0).toString()));
        int id = 0;
        String name = null;
        try {
            String query = "SELECT * FROM products WHERE ProductId = '"+index+"'";
            pst = con.prepareStatement(query);
            rs = pst.executeQuery();
            if (rs.next()) {
                id = rs.getInt("ProductId");
                id_lbl.setText(Integer.toString(id));
                name = rs.getString("Name");
                name_lbl.setText(name);
                int availableQty = rs.getInt("Quantity");
                availableQty_txt.setText(Integer.toString(availableQty));
                float buyPrice = rs.getFloat("PurchaseCost");
                purchaseCost_txt.setText(Float.toString(buyPrice));
                byte[] imageData = rs.getBytes("Image");
                float totalPrice = buyPrice * availableQty;
                String tk = "৳";
                totalPrice_lbl.setText("Total Price : "+tk+" "+totalPrice);
                img_lbl.setIcon(resizeImage(null, imageData,img_lbl.getWidth(), img_lbl.getHeight(),Image.SCALE_SMOOTH));
                if (availableQty > 0) {
                    availableCheckBox.setSelected(true);
                    stockOutCheckBox.setSelected(false);
                }
                else{
                    availableCheckBox.setSelected(false);
                    stockOutCheckBox.setSelected(true);
                }  
                itemInfo_lbl.setText("Name : "+name+", Qty : "+availableQty+", Price : ৳"+buyPrice+", Total Price : ৳"+totalPrice);
            }              
        } catch (SQLException e) {
            JOptionPane.showMessageDialog(null, e);
        }
        finally{
            try {
                rs.close();
                pst.close();
                con.close();
            } catch (SQLException e) {
            
            }
        }
    }//GEN-LAST:event_products_tblMouseClicked

    private void frist_btnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_frist_btnActionPerformed
       pos = 0;
        try {
            showSelectedProduct(pos);
        } catch (SQLException ex) {
           // Logger.getLogger(UserEditingForm.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_frist_btnActionPerformed

    private void next_btnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_next_btnActionPerformed
        pos++;
        try {
            if (pos >= getAllProducts().size()) {
                pos = getAllProducts().size()-1;
            }
            showSelectedProduct(pos);
            getAllProducts().clear();
        } catch (SQLException ex) {
           // Logger.getLogger(UserEditingForm.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_next_btnActionPerformed

    private void pre_btnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_pre_btnActionPerformed
        pos--;
        try {
            if (pos < 0) {
                pos = 0;
            }
            showSelectedProduct(pos);
        } catch (SQLException ex) {
          //  Logger.getLogger(UserEditingForm.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_pre_btnActionPerformed

    private void last_btnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_last_btnActionPerformed
        try {
            pos = getAllProducts().size() - 1;
            showSelectedProduct(pos);
            getAllProducts().clear();
        } catch (SQLException ex) {
          //  Logger.getLogger(UserEditingForm.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_last_btnActionPerformed

    private void search_btnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_search_btnActionPerformed
        String name = (String)name_txt.getText();
        searchItemsByName(name);
        name_txt.setText("");
    }//GEN-LAST:event_search_btnActionPerformed

    private void showAll_btnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_showAll_btnActionPerformed
       updateItemTable();
    }//GEN-LAST:event_showAll_btnActionPerformed

    private void clear_btnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_clear_btnActionPerformed
        clearBillItemsInfo();
    }//GEN-LAST:event_clear_btnActionPerformed

    private void nameSearch_btnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_nameSearch_btnActionPerformed
        String name = (String)name_cmb.getSelectedItem();
        searchItemsByName(name);
        name_cmb.setSelectedItem(null);
    }//GEN-LAST:event_nameSearch_btnActionPerformed

    private void clear_btn2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_clear_btn2ActionPerformed
        java.awt.EventQueue.invokeLater(() -> {
            new BillBrowserForm(currentUser).setVisible(true);
            this.dispose();
        });
    }//GEN-LAST:event_clear_btn2ActionPerformed

    private void countBillItems_btnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_countBillItems_btnActionPerformed
        
        try {
            int pcs = 0;
            pcs = bill.getBillItems().stream().map((billItem) -> billItem.getQty()).reduce(pcs, Integer::sum);
            JOptionPane.showMessageDialog(null, "Item count "+pcs);
            
        } catch (HeadlessException e) {
        }
    }//GEN-LAST:event_countBillItems_btnActionPerformed

    private void searchByCompany_btnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_searchByCompany_btnActionPerformed
        try {
            String value = (String)company_cmb.getSelectedItem();
            searchItemsByCompany(value);
            company_cmb.setSelectedItem(null);
        } catch (Exception e) {
        }
    }//GEN-LAST:event_searchByCompany_btnActionPerformed

    private void catSearch_btnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_catSearch_btnActionPerformed
         try {
            String value = (String)type_cmb.getSelectedItem();
            searchItemsByType(value);
            type_cmb.setSelectedItem(null);
        } catch (Exception e) {
        }
    }//GEN-LAST:event_catSearch_btnActionPerformed

    private void refresh_btnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_refresh_btnActionPerformed
        try {
            new AdministratorHomeForm(currentUser).setVisible(true);
            this.dispose();   
        } catch (Exception e) {
        
        }
    }//GEN-LAST:event_refresh_btnActionPerformed

    private void addToBill_btnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addToBill_btnActionPerformed
        float grandTotal = 0;    
        try {
            int billqty = Integer.parseInt(qtyOnBill_txt.getText());
            float sellPrice = Float.parseFloat(sellingPrice_txt.getText());
            
                
            
                    if(billqty <= Integer.parseInt(availableQty_txt.getText())) {
                        
                        Item item = new Item();
                        item.setId(Integer.parseInt(id_lbl.getText()));
                        item.setName(name_lbl.getText());
                        item.setQty(billqty);
                        item.setAvailableQty(Integer.parseInt(availableQty_txt.getText()));
                        item.setBuyingPrice(Float.parseFloat(purchaseCost_txt.getText()));
                        item.setSellingPrice(sellPrice);
                        item.setTotalPrice(sellPrice, billqty);
//                        if (bill.getBillItems().contains(item)) {
//                            JOptionPane.showMessageDialog(null, "This item already is in cart! update it's qty or price.");
//                        }else{
                            bill.addItemToBillItems(item);
                            DefaultTableModel model = (DefaultTableModel)billItems_tbl.getModel();
                            Object[] row = new Object[5];
                            for (int i = 0; i < bill.getBillItems().size(); i++) {
                                row[0] = (i+1);
                                row[1] = bill.getBillItems().get(i).getName();
                                row[2] = bill.getBillItems().get(i).getSellingPrice();
                                row[3] = bill.getBillItems().get(i).getQty();
                                row[4] = bill.getBillItems().get(i).getTotalPrice();
                                grandTotal+= bill.getBillItems().get(i).getTotalPrice();
                            }
                            model.addRow(row);                        
                            clearBillItemsInfo();
                            grandTotal_txt.setText(Float.toString(grandTotal));
//                        }    
                    }else{
                        JOptionPane.showMessageDialog(null, "Qty exceded! Decrese quantity.");
                    }
                    
                
        } catch (HeadlessException | NumberFormatException e) {
        }
    }//GEN-LAST:event_addToBill_btnActionPerformed

    private void update_btnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_update_btnActionPerformed
        float grandTotal = 0;
        try {
            int index = Integer.parseInt(index_lbl.getText());
            float price = Float.parseFloat(billItemPrice_txt.getText());
            int qty = Integer.parseInt(billItemQty_txt.getText());
            bill.getBillItems().get(index).setSellingPrice(price);
            bill.getBillItems().get(index).setQty(qty);
            bill.getBillItems().get(index).setTotalPrice(price, qty);
            DefaultTableModel model = (DefaultTableModel)billItems_tbl.getModel();
            if (index >= 0 & qty <= bill.getBillItems().get(index).getAvailableQty()) {
              model.setValueAt(bill.getBillItems().get(index).getSellingPrice(), index, 2);  
              model.setValueAt(bill.getBillItems().get(index).getQty(), index, 3);
              model.setValueAt(bill.getBillItems().get(index).getTotalPrice(), index, 4);
            }else{
                JOptionPane.showMessageDialog(null, "Quantity limit crossed! Please confirm it.");
            }
            for (int i = 0; i < bill.getBillItems().size(); i++) {
                    grandTotal+= bill.getBillItems().get(i).getTotalPrice();
            }
            grandTotal_txt.setText(Float.toString(grandTotal));
            
            //lbl_id.setText("id:");
            n_lbl.setText("Name:");
            billItemPrice_txt.setText("");
            billItemQty_txt.setText("");
            index_lbl.setText("");            
        } catch (NumberFormatException e) {
        }
    }//GEN-LAST:event_update_btnActionPerformed

    private void billItems_tblMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_billItems_tblMouseClicked
        try {
            int row = billItems_tbl.getSelectedRow();
            index_lbl.setText(Integer.toString(row));
            //lbl_id.setText("id:"+Integer.toString(bill.getBillItems().get(row).getId()));
            n_lbl.setText("Name : "+bill.getBillItems().get(row).getName());
            billItemPrice_txt.setText(Float.toString(bill.getBillItems().get(row).getSellingPrice()));
            billItemQty_txt.setText(Integer.toString(bill.getBillItems().get(row).getQty())); 
        } catch (Exception e) {
        }
    }//GEN-LAST:event_billItems_tblMouseClicked

    private void ok_btnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ok_btnActionPerformed
//        PreparedStatement pst = null;
//        Connection con = null;
//        ResultSet rs = null;
//        try {
//            if (checkInputs() && bill.getBillItems().size() > 0) {
//               bill.setCustomerName(customerName_txt.getText());
//               bill.setCustomerPhone(customerPhone_txt.getText());
//               bill.setDate(sellDate_chooser.getDate().toString());
//               bill.setGrandTotal();
//               
//               /**************************************************************************************************/
//               /* Checking if the bill contains all nessacery information that is required for further processing*/
//               /**************************************************************************************************/
//               //System.out.println(bill.getCustomerName()+", "+bill.getCustomerPhone()+", "+bill.getDate()+", "+bill.getGrandTotal());
//               /**************************************************************************************************/
//               /* sucessfully checked bill information. That fulfills the requirements.Now proceeding for next job*/
//               /*
//               * Algorithm >>> as follows
//                    1. check for valid informations.
//                    2. insert bill into bills table.
//                    3. update cashwalet.
//                    4. update inventory products.
//                    5. print bill.
//                    6. update bill items. Make it zero.
//               */
//               
//               /* Bill table insert query*/
//               float actualTotal = 0;
//               String items = "";
//               String prices = "";
//               String quantities = "";
//               for (Item billItem : bill.getBillItems()) {
//                    items += "["+billItem.getName()+"]";
//                    prices += "["+Float.toString(billItem.getSellingPrice())+"]";
//                    quantities += "["+Integer.toString(billItem.getQty())+"]";
//                    actualTotal += billItem.getQty() * billItem.getBuyingPrice();
//               }
//                /* I am here .........pROGRAM DOESN'T WORK. IT SUCKS BADLY.*/              
//                //System.out.println(items+"\t"+prices+"\t"+quantities+"\t"+bill.getGrandTotal()+"\t"+actualTotal+"\t"+bill.getDate());
//                try {
//                    con = DbConnector.ConnectDB();
//                    pst = con.prepareStatement("INSERT INTO bills (Items,Prices,Quantities,TotalCost,Date,CustomerName,CustomerPhone,SoldBy,NetProfit) VALUES (?,?,?,?,?,?,?,?,?)");
//                    pst.setString(1,items);
//                    pst.setString(2,prices);
//                    pst.setString(3,quantities);
//                    pst.setFloat(4,bill.getGrandTotal());
//                    SimpleDateFormat dateFormate = new SimpleDateFormat("yyyy-MM-dd");
//                    String addDate = dateFormate.format(sellDate_chooser.getDate());
//                    pst.setString(5,addDate);
//                    pst.setString(6,bill.getCustomerName());
//                    pst.setString(7,bill.getCustomerPhone());
//                    pst.setString(8,served_cmb.getSelectedItem().toString());
//                    pst.setFloat(9,(bill.getGrandTotal() - actualTotal));
//                    pst.executeUpdate();
//                    /*
//                    Now updating the cashwalet
//                    */
//                    try {
//                        double amount = 0;
//                        String updateQuery = null;
//                        pst = null;
//                        updateQuery = "SELECT * FROM cashwalet";
//                        pst = con.prepareStatement(updateQuery);
//                        rs = pst.executeQuery();
//                        if (rs.next()) {
//                            amount += rs.getDouble("Amount");
//                        }
//                        updateQuery = null;
//                        updateQuery = "UPDATE cashwalet SET Amount = ? WHERE CashWaletId = ?";
//                        pst = con.prepareStatement(updateQuery);
//                        pst.setDouble(1,(amount + bill.getGrandTotal()));
//                        pst.setInt(2, 1);
//                        pst.executeUpdate();
//                        /*
//                        ** now updating the inventory items.
//                        ** IT'S really HARD..........isn't it!
//                        */
//                        try {
////                            String query = null;
////                            int  qtys [] = new int[bill.getBillItems().size()];
////                            for (int i = 0; i < bill.getBillItems().size(); i++) {
////                                query = "SELECT Quantity FROM products WHERE ProductId = '"+bill.getBillItems().get(i).getId()+"'";
////                                pst = con.prepareStatement(query);
////                                rs = pst.executeQuery();
////                                if (rs.next()) {
////                                    qtys[i] = rs.getInt("Quantity");
////                                }
////                            }
//                            updateQuery = null;
//                            
//                            for (int i = 0; i < bill.getBillItems().size(); i++) {
//                                int newVal = bill.getBillItems().get(i).getAvailableQty() - bill.getBillItems().get(i).getQty();
//                                pst = con.prepareStatement("UPDATE products SET Quantity = '"+newVal+"' WHERE ProductId = '"+bill.getBillItems().get(i).getId()+"'");
//                                pst.executeUpdate();
//                            }
//                            updateItemTable();
//                           // bill.getBillItems().removeAll(ArrayList<Item> items);
//                            int value = JOptionPane.showConfirmDialog(null, "All Transections are updated.\nDo you want to print the bill now ?","Print",JOptionPane.YES_NO_OPTION);
//                                if (value == 0) {
//                                   
//                                    pst = null;
//                                    updateQuery = "SELECT * FROM bills WHERE BillId =(SELECT MAX(BillId) FROM bills)";
//                                    pst = con.prepareStatement(updateQuery);
//                                    rs = pst.executeQuery();
//                                    if (rs.next()) {
//                                        bill.setBillId(rs.getInt("BillId"));
//                                    }
//                                    //System.out.println("Here is the last bill id.*********>>>>>>>>"+bill.getBillId());
//                                    PrinterJob pj = PrinterJob.getPrinterJob();        
//                                    pj.setPrintable(new BillPrintable(),getPageFormat(pj));
//                                    try {
//                                        pj.print();
//                                        
//                                    }
//                                    catch (PrinterException ex) {
//                                    
//                                    }
//                                    bill.removeAllItemsFromBill();
//                                    bill.setGrandTotal();
//                                    /********************************/
//                                    DefaultTableModel model = (DefaultTableModel)billItems_tbl.getModel();
//                                    model.setRowCount(0);
//                                    clearBillsInformation();
//                                }
//                        
//                        } catch (SQLException e) {
//                        }
//                        
//                    } catch (SQLException e) {
//                    
//                    }
//                    finally{
//                        try {
//                            rs.close();
//                            pst.close();
//                            con.close();
//                        } catch (SQLException e) {
//                        }
//                    }
//                } catch (SQLException e) {
//                }
//            }else{
//                JOptionPane.showMessageDialog(null, "Check the bill again carefully.");
//            }
//        } catch (HeadlessException e) {
//        
//        }


         /**************************************************************************************************************************/
        
         
         if ("Cash".equals(payment_cmb.getSelectedItem().toString())) {
            PreparedStatement pst = null;
            Connection con = null;
            ResultSet rs = null;
            try {
                if (checkInputs() && bill.getBillItems().size() > 0) {
                    bill.setCustomerName(customerName_txt.getText());
                    bill.setCustomerPhone(customerPhone_txt.getText());
                    bill.setDate(sellDate_chooser.getDate().toString());
                    bill.setGrandTotal();
               
               /**************************************************************************************************/
               /* Checking if the bill contains all nessacery information that is required for further processing*/
               /**************************************************************************************************/
               //System.out.println(bill.getCustomerName()+", "+bill.getCustomerPhone()+", "+bill.getDate()+", "+bill.getGrandTotal());
               /**************************************************************************************************/
               /* sucessfully checked bill information. That fulfills the requirements.Now proceeding for next job*/
               /*
               * Algorithm >>> as follows
                    1. check for valid informations.
                    2. insert bill into bills table.
                    3. update cashwalet.
                    4. update inventory products.
                    5. print bill.
                    6. update bill items. Make it zero.
               */
               
                int value = JOptionPane.showConfirmDialog(null, "Is everything ok ? Want to print bill now !","Save & Print",JOptionPane.YES_NO_OPTION);
                    if (value == 0) {
                    /* Bill table insert query*/
                        float actualTotal = 0;
                        String items = "";
                        String prices = "";
                        String quantities = "";
                        for (Item billItem : bill.getBillItems()) {
                            items += "["+billItem.getName()+"]";
                            prices += "["+Float.toString(billItem.getSellingPrice())+"]";
                            quantities += "["+Integer.toString(billItem.getQty())+"]";
                            actualTotal += billItem.getQty() * billItem.getBuyingPrice();
                        }
                /* I am here .........pROGRAM DOESN'T WORK. IT SUCKS BADLY.*/              
                //System.out.println(items+"\t"+prices+"\t"+quantities+"\t"+bill.getGrandTotal()+"\t"+actualTotal+"\t"+bill.getDate());
                        try {
                            due = 0;
                            con = DbConnector.ConnectDB();
                            pst = con.prepareStatement("INSERT INTO bills (Items,Prices,Quantities,TotalCost,Date,CustomerName,CustomerPhone,SoldBy,NetProfit,PaymentStatus,PaidAmount,DueAmount,PaymentDeadLine) VALUES (?,?,?,?,?,?,?,?,?,?,?,?,?)");
                            pst.setString(1,items);
                            pst.setString(2,prices);
                            pst.setString(3,quantities);
                        //pst.setFloat(4,bill.getGrandTotal());
                            pst.setFloat(4,Float.parseFloat(grandTotal_txt.getText()));
                            SimpleDateFormat dateFormate = new SimpleDateFormat("yyyy-MM-dd");
                            String addDate = dateFormate.format(sellDate_chooser.getDate());
                            pst.setString(5,addDate);
                            pst.setString(6,bill.getCustomerName());
                            pst.setString(7,bill.getCustomerPhone());
                            pst.setString(8,served_cmb.getSelectedItem().toString());
                            pst.setFloat(9,(bill.getGrandTotal() - actualTotal));
                            pst.setString(10,"Paid");
                            pst.setFloat(11, Float.parseFloat(grandTotal_txt.getText()));
                            pst.setFloat(12, 0);
                            pst.setString(13,null);
                            pst.executeUpdate();
                    /*
                    Now updating the cashwalet
                    */
                            try {
                                double amount = 0;
                                String updateQuery = null;
                                pst = null;
                                updateQuery = "SELECT * FROM cashwalet";
                                pst = con.prepareStatement(updateQuery);
                                rs = pst.executeQuery();
                                if (rs.next()) {
                                    amount += rs.getDouble("Amount");
                                }
                                updateQuery = null;
                                updateQuery = "UPDATE cashwalet SET Amount = ? WHERE CashWaletId = ?";
                                pst = con.prepareStatement(updateQuery);
                                pst.setDouble(1,(amount + bill.getGrandTotal()));
                                pst.setInt(2, 1);
                                pst.executeUpdate();
                        /*
                        ** now updating the inventory items.
                        ** IT'S really HARD..........isn't it!
                        */
                                try {
//                            String query = null;
//                            int  qtys [] = new int[bill.getBillItems().size()];
//                            for (int i = 0; i < bill.getBillItems().size(); i++) {
//                                query = "SELECT Quantity FROM products WHERE ProductId = '"+bill.getBillItems().get(i).getId()+"'";
//                                pst = con.prepareStatement(query);
//                                rs = pst.executeQuery();
//                                if (rs.next()) {
//                                    qtys[i] = rs.getInt("Quantity");
//                                }
//                            }
                                    updateQuery = null;
                            
                                    for (int i = 0; i < bill.getBillItems().size(); i++) {
                                        int newVal = bill.getBillItems().get(i).getAvailableQty() - bill.getBillItems().get(i).getQty();
                                        pst = con.prepareStatement("UPDATE products SET Quantity = '"+newVal+"' WHERE ProductId = '"+bill.getBillItems().get(i).getId()+"'");
                                        pst.executeUpdate();
                                    }
                                    updateItemTable();
                           // bill.getBillItems().removeAll(ArrayList<Item> items);

                                        pst = null;
                                        updateQuery = "SELECT * FROM bills WHERE BillId =(SELECT MAX(BillId) FROM bills)";
                                        pst = con.prepareStatement(updateQuery);
                                        rs = pst.executeQuery();
                                        if (rs.next()) {
                                            bill.setBillId(rs.getInt("BillId"));
                                        }
                                        //System.out.println("Here is the last bill id.*********>>>>>>>>"+bill.getBillId());
                                        PrinterJob pj = PrinterJob.getPrinterJob();        
                                        pj.setPrintable(new BillPrintable(),getPageFormat(pj));
                                        try {
                                            pj.print();
                                        }
                                        catch (PrinterException ex) {
                                        }
                                        bill.removeAllItemsFromBill();
                                        bill.setGrandTotal();
                                    /********************************/
                                        DefaultTableModel model = (DefaultTableModel)billItems_tbl.getModel();
                                        model.setRowCount(0);
                                        clearBillsInformation();
                                        grandTotal_txt.setText("");
                                
                        
                                } catch (SQLException e) {
                            
                                }
                        
                            } catch (SQLException e) {
                    
                            }
                            finally{
                                try {
                                    rs.close();
                                    pst.close();
                                    con.close();
                                }catch (SQLException e) {
                        
                            }
                        }
                    
                        } catch (SQLException e) {
                    
                        }
                    }
                /****************************/
                }else{
                    JOptionPane.showMessageDialog(null, "Check the bill again carefully.");
                }
            } catch (HeadlessException e) {
        
            }
        }else{
             JOptionPane.showMessageDialog(null, "Payment Type Mismatched.");
        }
        
    }//GEN-LAST:event_ok_btnActionPerformed

    private void stockCheck_mnuActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_stockCheck_mnuActionPerformed
       try {
           System.gc();
            new StockCheckFrom(currentUser).setVisible(true);
            this.dispose();
        } catch (SQLException ex) {
            Logger.getLogger(StockCheckFrom.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_stockCheck_mnuActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        try {
            System.gc();
            new StockCheckFrom(currentUser).setVisible(true);
            this.dispose();
        } catch (SQLException ex) {
            Logger.getLogger(StockCheckFrom.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jMenuItem3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem3ActionPerformed
        System.gc();
        new ExpensesMaintainanceForm(currentUser).setVisible(true);
        this.dispose();
    }//GEN-LAST:event_jMenuItem3ActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        new ExpensesMaintainanceForm(currentUser).setVisible(true);
        this.dispose();
    }//GEN-LAST:event_jButton2ActionPerformed

    private void jButton7ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton7ActionPerformed
        try {
            DefaultTableModel model = (DefaultTableModel)billItems_tbl.getModel();
            model.setRowCount(0);
            bill.removeAllItemsFromBill();
            clearBillsInformation();
            grandTotal_txt.setText("");
        } catch (Exception e) {
        }
    }//GEN-LAST:event_jButton7ActionPerformed

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        java.awt.EventQueue.invokeLater(() -> {
            System.gc();
            new BillBrowserForm(currentUser).setVisible(true);
            this.dispose();
        });
    }//GEN-LAST:event_jButton3ActionPerformed

    private void jMenuItem2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem2ActionPerformed
        java.awt.EventQueue.invokeLater(() -> {
            System.gc();
            new BillBrowserForm(currentUser).setVisible(true);
            this.dispose();
        });
    }//GEN-LAST:event_jMenuItem2ActionPerformed

    private void jMenuItem1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem1ActionPerformed
        java.awt.EventQueue.invokeLater(() -> {
            System.gc();
            new ProfileViewerFrom(currentUser).setVisible(true);
            this.dispose();
        });
    }//GEN-LAST:event_jMenuItem1ActionPerformed

    private void jMenuItem5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem5ActionPerformed
        int value = JOptionPane.showConfirmDialog(null, "Really want to logout ?","Lotout.",JOptionPane.YES_NO_OPTION);
        if (value == 0) {
            java.awt.EventQueue.invokeLater(() -> {
                new LoginForm().setVisible(true);
                this.dispose();
            });   
        }
        
    }//GEN-LAST:event_jMenuItem5ActionPerformed

    private void jMenu3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenu3ActionPerformed
        JOptionPane.showMessageDialog(null, "Need help!/nCall Khokon.");
    }//GEN-LAST:event_jMenu3ActionPerformed

    private void jMenu3MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jMenu3MouseClicked
        JOptionPane.showMessageDialog(null, "Ask for help - 01936733420.\nOr send mail to - ri0120@outlook.com\n                   Thanks.");
    }//GEN-LAST:event_jMenu3MouseClicked

    private void jMenuItem6ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem6ActionPerformed
        java.awt.EventQueue.invokeLater(() -> {
            try {
                System.gc();
                new ItemEditingForm(currentUser).setVisible(true);
                this.dispose();
            } catch (SQLException ex) {
                Logger.getLogger(ShopManagementApplication.class.getName()).log(Level.SEVERE, null, ex);
            }
        });
    }//GEN-LAST:event_jMenuItem6ActionPerformed

    private void jMenuItem11ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem11ActionPerformed
        java.awt.EventQueue.invokeLater(() -> {
            System.gc();
            new CompanyCategoryAndSupplierAddingForm(currentUser).setVisible(true);
            this.dispose();
        });
    }//GEN-LAST:event_jMenuItem11ActionPerformed

    private void jButton5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton5ActionPerformed
        java.awt.EventQueue.invokeLater(() -> {
            new CompanyCategoryAndSupplierAddingForm(currentUser).setVisible(true);
            this.dispose();
        });
    }//GEN-LAST:event_jButton5ActionPerformed

    private void jMenuItem9ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem9ActionPerformed
         java.awt.EventQueue.invokeLater(() -> {
            try {
                System.gc();
                new AccountsStatusForm(currentUser).setVisible(true);
                this.dispose();
            } catch (SQLException ex) {
                Logger.getLogger(ShopManagementApplication.class.getName()).log(Level.SEVERE, null, ex);
            }
        });
    }//GEN-LAST:event_jMenuItem9ActionPerformed

    private void jButton6ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton6ActionPerformed
        java.awt.EventQueue.invokeLater(() -> {
            new ActivitiesForm(currentUser).setVisible(true);
            this.dispose();
        });
    }//GEN-LAST:event_jButton6ActionPerformed

    private void jMenuItem7ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem7ActionPerformed
        java.awt.EventQueue.invokeLater(() -> {
            try {
                System.gc();
                new UserControllForm(currentUser).setVisible(true);
                this.dispose();
            } catch (SQLException ex) {
                Logger.getLogger(UserControllForm.class.getName()).log(Level.SEVERE, null, ex);
            }
        });
    }//GEN-LAST:event_jMenuItem7ActionPerformed

    private void due_btnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_due_btnActionPerformed
        if ("Due".equals(payment_cmb.getSelectedItem().toString())) {
            PreparedStatement pst = null;
            Connection con = null;
            ResultSet rs = null;
            try {
                if (checkInputs() && bill.getBillItems().size() > 0) {
                    bill.setCustomerName(customerName_txt.getText());
                    bill.setCustomerPhone(customerPhone_txt.getText());
                    bill.setDate(sellDate_chooser.getDate().toString());
                    bill.setGrandTotal();
               
               /**************************************************************************************************/
               /* Checking if the bill contains all nessacery information that is required for further processing*/
               /**************************************************************************************************/
               //System.out.println(bill.getCustomerName()+", "+bill.getCustomerPhone()+", "+bill.getDate()+", "+bill.getGrandTotal());
               /**************************************************************************************************/
               /* sucessfully checked bill information. That fulfills the requirements.Now proceeding for next job*/
               /*
               * Algorithm >>> as follows
                    1. check for valid informations.
                    2. insert bill into bills table.
                    3. update cashwalet.
                    4. update inventory products.
                    5. print bill.
                    6. update bill items. Make it zero.
               */
               
                int value = JOptionPane.showConfirmDialog(null, "Is everything ok ? Want to print bill now !","Save & Print",JOptionPane.YES_NO_OPTION);
                    if (value == 0) {
                    /* Bill table insert query*/
                        float actualTotal = 0;
                        String items = "";
                        String prices = "";
                        String quantities = "";
                        for (Item billItem : bill.getBillItems()) {
                            items += "["+billItem.getName()+"]";
                            prices += "["+Float.toString(billItem.getSellingPrice())+"]";
                            quantities += "["+Integer.toString(billItem.getQty())+"]";
                            actualTotal += billItem.getQty() * billItem.getBuyingPrice();
                        }
                /* I am here .........pROGRAM DOESN'T WORK. IT SUCKS BADLY.*/              
                //System.out.println(items+"\t"+prices+"\t"+quantities+"\t"+bill.getGrandTotal()+"\t"+actualTotal+"\t"+bill.getDate());
                        try {
                            due = (bill.getGrandTotal() - Float.parseFloat(paidAmount_txt.getText()));
                            con = DbConnector.ConnectDB();
                            pst = con.prepareStatement("INSERT INTO bills (Items,Prices,Quantities,TotalCost,Date,CustomerName,CustomerPhone,SoldBy,NetProfit,PaymentStatus,PaidAmount,DueAmount,PaymentDeadLine) VALUES (?,?,?,?,?,?,?,?,?,?,?,?,?)");
                            pst.setString(1,items);
                            pst.setString(2,prices);
                            pst.setString(3,quantities);
                        //pst.setFloat(4,bill.getGrandTotal());
                            pst.setFloat(4,Float.parseFloat(grandTotal_txt.getText()));
                            SimpleDateFormat dateFormate = new SimpleDateFormat("yyyy-MM-dd");
                            String addDate = dateFormate.format(sellDate_chooser.getDate());
                            pst.setString(5,addDate);
                            pst.setString(6,bill.getCustomerName());
                            pst.setString(7,bill.getCustomerPhone());
                            pst.setString(8,served_cmb.getSelectedItem().toString());
                            pst.setFloat(9,(bill.getGrandTotal() - actualTotal));
                            pst.setString(10,"Due");
                            pst.setFloat(11, Float.parseFloat(paidAmount_txt.getText()));
                            pst.setFloat(12, (Float.parseFloat(grandTotal_txt.getText()) - Float.parseFloat(paidAmount_txt.getText())));
                             SimpleDateFormat date = new SimpleDateFormat("yyyy-MM-dd");
                            String t = date.format(deadLine.getDate());
                            pst.setString(13,t);
                            pst.executeUpdate();
                    /*
                    Now updating the cashwalet
                    */
                            try {
                                double amount = 0;
                                String updateQuery = null;
                                pst = null;
                                updateQuery = "SELECT * FROM cashwalet";
                                pst = con.prepareStatement(updateQuery);
                                rs = pst.executeQuery();
                                if (rs.next()) {
                                    amount += rs.getDouble("Amount");
                                }
                                updateQuery = null;
                                updateQuery = "UPDATE cashwalet SET Amount = ? WHERE CashWaletId = ?";
                                pst = con.prepareStatement(updateQuery);
                                pst.setDouble(1,(amount + Float.parseFloat(paidAmount_txt.getText())));
                                pst.setInt(2, 1);
                                pst.executeUpdate();
                        /*
                        ** now updating the inventory items.
                        ** IT'S really HARD..........isn't it!
                        */
                                try {
//                            String query = null;
//                            int  qtys [] = new int[bill.getBillItems().size()];
//                            for (int i = 0; i < bill.getBillItems().size(); i++) {
//                                query = "SELECT Quantity FROM products WHERE ProductId = '"+bill.getBillItems().get(i).getId()+"'";
//                                pst = con.prepareStatement(query);
//                                rs = pst.executeQuery();
//                                if (rs.next()) {
//                                    qtys[i] = rs.getInt("Quantity");
//                                }
//                            }
                                    updateQuery = null;
                            
                                    for (int i = 0; i < bill.getBillItems().size(); i++) {
                                        int newVal = bill.getBillItems().get(i).getAvailableQty() - bill.getBillItems().get(i).getQty();
                                        pst = con.prepareStatement("UPDATE products SET Quantity = '"+newVal+"' WHERE ProductId = '"+bill.getBillItems().get(i).getId()+"'");
                                        pst.executeUpdate();
                                    }
                                    updateItemTable();
                           // bill.getBillItems().removeAll(ArrayList<Item> items);

                                        pst = null;
                                        updateQuery = "SELECT * FROM bills WHERE BillId =(SELECT MAX(BillId) FROM bills)";
                                        pst = con.prepareStatement(updateQuery);
                                        rs = pst.executeQuery();
                                        if (rs.next()) {
                                            bill.setBillId(rs.getInt("BillId"));
                                        }
                                        //System.out.println("Here is the last bill id.*********>>>>>>>>"+bill.getBillId());
                                        PrinterJob pj = PrinterJob.getPrinterJob();        
                                        pj.setPrintable(new BillPrintable(),getPageFormat(pj));
                                        try {
                                            pj.print();
                                        }
                                        catch (PrinterException ex) {
                                        }
                                        bill.removeAllItemsFromBill();
                                        bill.setGrandTotal();
                                    /********************************/
                                        DefaultTableModel model = (DefaultTableModel)billItems_tbl.getModel();
                                        model.setRowCount(0);
                                        clearBillsInformation();
                                        grandTotal_txt.setText("");
                                        paidAmount_txt.setText("");
                                        due = 0;
                                
                        
                                } catch (SQLException e) {
                            
                                }
                        
                            } catch (SQLException e) {
                    
                            }
                            finally{
                                try {
                                    rs.close();
                                    pst.close();
                                    con.close();
                                }catch (SQLException e) {
                        
                            }
                        }
                    
                        } catch (SQLException e) {
                    
                        }
                    }
                /****************************/
                }else{
                    JOptionPane.showMessageDialog(null, "Check the bill again carefully.");
                }
            } catch (HeadlessException e) {
        
            }
        }else{
            JOptionPane.showMessageDialog(null, "Payment Type Mismatched!");
        }
    }//GEN-LAST:event_due_btnActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException | InstantiationException | IllegalAccessException | javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(AdministratorHomeForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        
        /* Create and display the form */
        java.awt.EventQueue.invokeLater(() -> {
            new AdministratorHomeForm().setVisible(true);
        });
    }
    
    public void updateItemTable(){
        PreparedStatement pst = null;
        Connection con = DbConnector.ConnectDB();
        ResultSet rs = null;
        try {
         String sql = "SELECT * FROM products"; 
         pst = con.prepareStatement(sql);
         rs = pst.executeQuery();
         products_tbl.setModel(DbUtils.resultSetToTableModel(rs));
        } catch (SQLException e) {
            JOptionPane.showMessageDialog(null, e);
        } finally{
            try {
                rs.close();
                pst.close();
                
                con.close();
            } catch (SQLException e) {
            
            }
        }
    
    }
    public ImageIcon resizeImage(String imagePath, byte[] pic, int width, int height, int SCALE_SMOOTH){
        ImageIcon myImage = null;
        if (imagePath != null) {
            myImage = new ImageIcon(imagePath);
        }else{
            myImage = new ImageIcon(pic);
        }
        Image img = myImage.getImage();
        Image img2 = img.getScaledInstance(img_lbl.getWidth(), img_lbl.getHeight(),Image.SCALE_SMOOTH);
        ImageIcon image = new ImageIcon(img2);
        return image;
    }
    private ArrayList<Product> getAllProducts() throws SQLException{
        ArrayList<Product> products = new ArrayList<>();
        Connection con = DbConnector.ConnectDB();
        String query  = "SELECT * FROM products";
        Statement st = con.createStatement();
        ResultSet rs = null;
        try {
            rs = st.executeQuery(query);
            Product product;
            while(rs.next()){
                product = new Product(rs.getInt("ProductId"),rs.getString("Name"),rs.getString("Category"),
                    rs.getString("Company"),rs.getFloat("PurchaseCost"),rs.getInt("Quantity"),
                    rs.getDate("InhouseDate").toString(),rs.getBytes("Image"),rs.getString("Supplier"),rs.getString("Description"));
                products.add(product);
            }
        } catch (SQLException ex) {
            //Logger.getLogger(HomeForm.class.getName()).log(Level.SEVERE, null, ex);
        }
        finally{
            try {
                rs.close();
                st.close();
                con.close();
            } catch (SQLException e) {
            }
        }
        return products;
    }
    public void showSelectedProduct(int index) throws SQLException{

        id_lbl.setText(Integer.toString(getAllProducts().get(index).getId()));
        name_lbl.setText(getAllProducts().get(index).getName());
        purchaseCost_txt.setText(Float.toString(getAllProducts().get(index).getBuyingPrice()));
        availableQty_txt.setText(Integer.toString(getAllProducts().get(index).getQty()));
        img_lbl.setIcon(resizeImage(null, getAllProducts().get(index).getPicture(),img_lbl.getWidth(), img_lbl.getHeight(),Image.SCALE_SMOOTH));
        float totalPrice = getAllProducts().get(index).getBuyingPrice() * getAllProducts().get(index).getQty();
        totalPrice_lbl.setText("Total Price : ৳"+totalPrice);
        if (getAllProducts().get(index).getQty() > 0) {
            availableCheckBox.setSelected(true);
            stockOutCheckBox.setSelected(false);
        }
        else{
            availableCheckBox.setSelected(false);
            stockOutCheckBox.setSelected(true);
        }
        itemInfo_lbl.setText("Name : "+getAllProducts().get(index).getName()+", Qty : "+Integer.toString(getAllProducts().get(index).getQty())+", Price : ৳"+Float.toString(getAllProducts().get(index).getBuyingPrice())+", Total Price : ৳"+totalPrice);
        getAllProducts().clear();
    }
    public void searchItemsByName(String n){
        PreparedStatement pst = null;
        Connection con = DbConnector.ConnectDB();
        ResultSet rs = null;
        try {
         String sql = "SELECT * FROM products WHERE Name = '"+n+"'"; 
         pst = con.prepareStatement(sql);
         rs = pst.executeQuery();
                products_tbl.setModel(DbUtils.resultSetToTableModel(rs));
        Statement st = con.createStatement();
        rs = null;
            try {
               rs = st.executeQuery(sql);
            Product product;
            if (rs.next()){
                int id = rs.getInt("ProductId");
                id_lbl.setText(Integer.toString(id));
                String name = rs.getString("Name");
                name_lbl.setText(name);
                int availableQty = rs.getInt("Quantity");
                availableQty_txt.setText(Integer.toString(availableQty));
                float buyPrice = rs.getFloat("PurchaseCost");
                purchaseCost_txt.setText(Float.toString(buyPrice));
                byte[] imageData = rs.getBytes("Image");
                float totalPrice = buyPrice * availableQty;
                String tk = "৳";
                totalPrice_lbl.setText("Total Price : "+tk+" "+totalPrice);
                img_lbl.setIcon(resizeImage(null, imageData,img_lbl.getWidth(), img_lbl.getHeight(),Image.SCALE_SMOOTH));
                if (availableQty > 0) {
                    availableCheckBox.setSelected(true);
                    stockOutCheckBox.setSelected(false);
                }
                else{
                    availableCheckBox.setSelected(false);
                    stockOutCheckBox.setSelected(true);
                }  
            } 
            } catch (SQLException e) {
            
            }
        } catch (SQLException e) {
            JOptionPane.showMessageDialog(null, e);
        } finally{
            try {
                rs.close();
                pst.close();
                con.close();
            } catch (SQLException e) {
            
            }
        }
    }
    public void clearBillItemsInfo(){
        id_lbl.setText("ID :");
        name_lbl.setText("Name :");
        availableQty_txt.setText("");
        purchaseCost_txt.setText("");
        sellingPrice_txt.setText("");
        qtyOnBill_txt.setText("");
        totalPrice_lbl.setText("Total Price :");
        img_lbl.setIcon(null);
        itemInfo_lbl.setText("Select any item again.");
        availableCheckBox.setSelected(false);
        stockOutCheckBox.setSelected(false);
     }
    public void clearBillsInformation(){
        customerName_txt.setText("");
        customerPhone_txt.setText("");
        //served_cmb.setSelectedItem(null);
        //payment_cmb.setSelectedItem(null);
        grandTotal_txt.setText("");
    }
    public void fillComboBoxWithName(){
        PreparedStatement pst = null;
        Connection con = DbConnector.ConnectDB();
        ResultSet rs = null;
        try {
            String sql = "SELECT * FROM products"; 
            pst = con.prepareStatement(sql);
            rs = pst.executeQuery();
            while (rs.next()) {
                name_cmb.addItem(rs.getString(2));   
                }
            } catch (SQLException e) {
                JOptionPane.showMessageDialog(null, e);
            } finally{
                try {
                    rs.close();
                    pst.close();
                    con.close();
                } catch (SQLException e) {
            }
        }
    }
    public void fillComboBoxWithUserName(){
        PreparedStatement pst = null;
        Connection con = DbConnector.ConnectDB();
        ResultSet rs = null;
        try {
            String sql = "SELECT * FROM users"; 
            pst = con.prepareStatement(sql);
            rs = pst.executeQuery();
            while (rs.next()) {
                served_cmb.addItem(rs.getString(15));   
                }
            } catch (SQLException e) {
                JOptionPane.showMessageDialog(null, e);
            } finally{
                try {
                    rs.close();
                    pst.close();
                    con.close();
                } catch (SQLException e) {
            }
        }
    }
    public void fillComboBoxWithCategory(){
        PreparedStatement pst = null;
        Connection con = DbConnector.ConnectDB();
        ResultSet rs = null;
        try {
            String sql = "SELECT * FROM categories"; 
            pst = con.prepareStatement(sql);
            rs = pst.executeQuery();
            while (rs.next()) {
                    type_cmb.addItem(rs.getString(2));   
            }
        } 
        catch (SQLException e) {
               JOptionPane.showMessageDialog(null, e);
        } finally{
            try {
                    rs.close();
                    pst.close();
                    con.close();
            } catch (SQLException e) {
            
            }
        }
    }
    public void fillComboBoxWithCompany(){
        PreparedStatement pst = null;
        Connection con = DbConnector.ConnectDB();
        ResultSet rs = null;
        try {
            String sql = "SELECT * FROM companies"; 
            pst = con.prepareStatement(sql);
            rs = pst.executeQuery();
                while (rs.next()) {
                    company_cmb.addItem(rs.getString(2));   
                }
            } catch (SQLException e) {
                JOptionPane.showMessageDialog(null, e);
            } finally{
                try {
                    rs.close();
                    pst.close();
                    con.close();
                } catch (SQLException e) {
            }
        }
    }
    public void searchItemsByType(String t){
        PreparedStatement pst = null;
        Connection con = DbConnector.ConnectDB();
        ResultSet rs = null;
        try {
         String sql = "SELECT * FROM products WHERE Category = '"+t+"'"; 
         pst = con.prepareStatement(sql);
         rs = pst.executeQuery();
         products_tbl.setModel(DbUtils.resultSetToTableModel(rs));
        } catch (SQLException e) {
            JOptionPane.showMessageDialog(null, e);
        } finally{
            try {
                rs.close();
                pst.close();
                con.close();
            } catch (SQLException e) {
            
            }
        }
    }
    public void searchItemsByCompany(String c){
        PreparedStatement pst = null;
        Connection con = DbConnector.ConnectDB();
        ResultSet rs = null;
         try {
         String sql = "SELECT * FROM products WHERE Company = '"+c+"'"; 
         pst = con.prepareStatement(sql);
         rs = pst.executeQuery();
         products_tbl.setModel(DbUtils.resultSetToTableModel(rs));
        } catch (SQLException e) {
            JOptionPane.showMessageDialog(null, e);
        } finally{
            try {
                rs.close();
                pst.close();
                con.close();
            } catch (SQLException e) {
            
            }
        }
    }
//public void clock(){
//    
//        Thread clock;
//        clock = new Thread(){
//            @Override
//            public void run(){
//                try {
//                    for (;;) {
//                        Calendar calendar = new GregorianCalendar();
//                        int seconds = calendar.get(Calendar.SECOND);
//                        int minutes = calendar.get(Calendar.MINUTE);
//                        int hours = calendar.get(Calendar.HOUR);
//                        time_mnu_lbl.setText(hours+""+":"+minutes+":"+seconds);
//                        sleep(100);
//                    }
//                } catch (InterruptedException e) {
//                }
//            }
//        };
//        clock.start();
//    }
    public boolean checkInputs(){ 
        if (    customerName_txt.getText() == null
                || sellDate_chooser.getDate() == null
           )
        {
            return false;
        }else{
            try{
                Float.parseFloat(grandTotal_txt.getText());
                return true;
            }catch(NumberFormatException e){
                return false;
            }   
        }
    }
    /*
    **Frist hit
    */
     
    public PageFormat getPageFormat(PrinterJob pj){
    
        PageFormat pf = pj.defaultPage();
        Paper paper = pf.getPaper();    

        double middleHeight =16.0;  
        double headerHeight = 4.0;                  
        double footerHeight = 4.0;                  
        double width = convert_CM_To_PPI(16);      //printer know only point per inch.default value is 72ppi
        double height = convert_CM_To_PPI(headerHeight+middleHeight+footerHeight); 
        paper.setSize(width, height);
        paper.setImageableArea(0,20,width,height - convert_CM_To_PPI(2));   
        //define boarder size    after that print area width is about 180 points
        pf.setOrientation(PageFormat.PORTRAIT);
        //select orientation portrait or landscape but for this time portrait
        pf.setPaper(paper);    

        return pf;
    }
    protected static double convert_CM_To_PPI(double cm) {            
	return toPPI(cm * 0.393600787);            
    }
    protected static double toPPI(double inch) {            
	return inch * 72d;            
    }
    public class BillPrintable implements Printable {
    
        @Override
        public int print(Graphics graphics, PageFormat pageFormat,int pageIndex) throws PrinterException {    
      
            int result = NO_SUCH_PAGE;    
            if (pageIndex == 0) {                    
        
                Graphics2D g2d = (Graphics2D) graphics;                    
                g2d.translate((int) pageFormat.getImageableX(),(int) pageFormat.getImageableY()); 
                
                FontMetrics metrics=g2d.getFontMetrics(new Font("Arial",Font.BOLD,7));
            //    int idLength=metrics.stringWidth("000000");
            //int idLength=metrics.stringWidth("00");
                int idLength=metrics.stringWidth("000");
                int amtLength=metrics.stringWidth("000000");
                int qtyLength=metrics.stringWidth("00000");
                int priceLength=metrics.stringWidth("000000");
               // int prodLength=(int)width - idLength - amtLength - qtyLength - priceLength-17;

            //    int idPosition=0;
            //    int productPosition=idPosition + idLength + 2;
            //    int pricePosition=productPosition + prodLength +10;
            //    int qtyPosition=pricePosition + priceLength + 2;
            //    int amtPosition=qtyPosition + qtyLength + 2;
            
                int productPosition = 0;
               // int discountPosition= prodLength+5;
                //int pricePosition = discountPosition +idLength+10;
                //int qtyPosition=pricePosition + priceLength + 4;
                //int amtPosition=qtyPosition + qtyLength;
                try{
                    int y=20;
                    int yShift = 10;
                    int headerRectHeight=15;
            
                
                    g2d.setFont(new Font("Monospaced",Font.PLAIN,9));
                    g2d.drawString("*****************************************************************",10,y);y+=yShift;
                    g2d.drawString("*************** Anik Telecom. Ulipur, Kurigram. *****************",10,y);y+=yShift;
                    g2d.drawString("************** Shop no.1/A,Moffize Uddin Merket *****************",10,y);y+=yShift;
                    g2d.drawString("*****************************************************************",10,y);y+=yShift;
                    g2d.drawString("                >>>>>> Bill No. : "+bill.getBillId()+" <<<<<<            ",10,y);y+=yShift;
                    g2d.drawString("Date : "+sellDate_chooser.getDate()+"                            ",10,y);y+=yShift;
                    g2d.drawString(" >>>> Sold by : "+served_cmb.getSelectedItem()+"                 ",10,y);y+=headerRectHeight;
                    g2d.drawString(" >>>> Payment Status : "+payment_cmb.getSelectedItem()+"         ",10,y);y+=headerRectHeight;
                    g2d.drawString("_________________________________________________________________",10,y);y+=yShift;
                    g2d.drawString(" >>>> Customer Name :"+customerName_txt.getText()+"              ",10,y);y+=yShift;
                    g2d.drawString(" >>>> Customer Phone :"+customerPhone_txt.getText()+"            ",10,y);y+=yShift;
                    g2d.drawString("______________________________Items______________________________",10,y);y+=headerRectHeight;
                    g2d.drawString("-----------------------------------------------------------------",10,y);y+=yShift;
                    g2d.drawString("Item Name           Qty           U.Price           T.Price      ",10,y);y+=yShift;
                    g2d.drawString("-----------------------------------------------------------------",10,y);y+=headerRectHeight;
                    for (int i = 0; i < bill.getBillItems().size(); i++) {
                        g2d.drawString(bill.getBillItems().get(i).getName()+"           "+bill.getBillItems().get(i).getQty()+"            "+bill.getBillItems().get(i).getSellingPrice()+"            "+bill.getBillItems().get(i).getTotalPrice(),10,y);y+=yShift;
                    }
                    g2d.drawString("-----------------------------------------------------------------",10,y);y+=yShift;
                    g2d.drawString("                      Total amount: ৳ "+grandTotal_txt.getText()+"",10,y);y+=yShift;
                    g2d.drawString("                      Due amount : ৳ "+due,10,y);y+=yShift;
                    g2d.drawString("-----------------------------------------------------------------",10,y);y+=yShift;
                    g2d.drawString("                  THANKS FOR VISITING OUR SHOP                       ",10,y);y+=yShift;
                    g2d.drawString("*****************************************************************",10,y);y+=yShift;
                    g2d.drawString("                         Powered by                              ",10,y);y+=yShift;
                    g2d.drawString("                   0120.rashedul@gmail.com                       ",10,y);y+=yShift;
                    g2d.drawString("*****************************************************************",10,y);y+=yShift;
                                g2d.setFont(new Font("Monospaced",Font.BOLD,10));
                    g2d.drawString("                Customer Shopping Invoice                        ",10,y);y+=yShift;
                   
                }
                catch(NumberFormatException r){
                
                }
                result = PAGE_EXISTS;    
            }    
        return result;    
        }
   }    
    
    private void setIcon(){
    
        setIconImage(Toolkit.getDefaultToolkit().getImage(getClass().getResource("/shop/management/application/res/shop-icon.png")));
    
    }
    /*
    * Printing functions ends
    */
                
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton addToBill_btn;
    private javax.swing.JCheckBox availableCheckBox;
    private javax.swing.JTextField availableQty_txt;
    private javax.swing.JLabel billItemPrice_lbl;
    private javax.swing.JLabel billItemPrice_lbl1;
    private javax.swing.JTextField billItemPrice_txt;
    private javax.swing.JTextField billItemQty_txt;
    private javax.swing.JTable billItems_tbl;
    private javax.swing.JButton catSearch_btn;
    private javax.swing.JButton clear_btn;
    private javax.swing.JButton clear_btn2;
    private javax.swing.JComboBox<String> company_cmb;
    private javax.swing.JButton countBillItems_btn;
    private javax.swing.JTextField customerName_txt;
    private javax.swing.JTextField customerPhone_txt;
    private com.toedter.calendar.JDateChooser deadLine;
    private javax.swing.JButton due_btn;
    private javax.swing.JButton frist_btn;
    private javax.swing.JTextField grandTotal_txt;
    private javax.swing.JLabel id_lbl;
    private javax.swing.JLabel img_lbl;
    private javax.swing.JLabel index_lbl;
    private javax.swing.JLabel itemInfo_lbl;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JButton jButton4;
    private javax.swing.JButton jButton5;
    private javax.swing.JButton jButton6;
    private javax.swing.JButton jButton7;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel15;
    private javax.swing.JLabel jLabel16;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenu jMenu2;
    private javax.swing.JMenu jMenu3;
    private javax.swing.JMenu jMenu4;
    private javax.swing.JMenu jMenu5;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JMenuItem jMenuItem1;
    private javax.swing.JMenuItem jMenuItem10;
    private javax.swing.JMenuItem jMenuItem11;
    private javax.swing.JMenuItem jMenuItem2;
    private javax.swing.JMenuItem jMenuItem3;
    private javax.swing.JMenuItem jMenuItem4;
    private javax.swing.JMenuItem jMenuItem5;
    private javax.swing.JMenuItem jMenuItem6;
    private javax.swing.JMenuItem jMenuItem7;
    private javax.swing.JMenuItem jMenuItem8;
    private javax.swing.JMenuItem jMenuItem9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel10;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JPanel jPanel7;
    private javax.swing.JPanel jPanel8;
    private javax.swing.JPanel jPanel9;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JPopupMenu.Separator jSeparator1;
    private javax.swing.JSeparator jSeparator10;
    private javax.swing.JPopupMenu.Separator jSeparator2;
    private javax.swing.JToolBar.Separator jSeparator3;
    private javax.swing.JToolBar.Separator jSeparator4;
    private javax.swing.JToolBar.Separator jSeparator5;
    private javax.swing.JToolBar.Separator jSeparator6;
    private javax.swing.JPopupMenu.Separator jSeparator7;
    private javax.swing.JPopupMenu.Separator jSeparator8;
    private javax.swing.JToolBar.Separator jSeparator9;
    private javax.swing.JToolBar jToolBar1;
    private javax.swing.JButton last_btn;
    private javax.swing.JLabel n_lbl;
    private javax.swing.JButton nameSearch_btn;
    private javax.swing.JComboBox<String> name_cmb;
    private javax.swing.JLabel name_lbl;
    private javax.swing.JTextField name_txt;
    private javax.swing.JButton next_btn;
    private javax.swing.JButton ok_btn;
    private javax.swing.JTextField paidAmount_txt;
    private javax.swing.JComboBox<String> payment_cmb;
    private javax.swing.JButton pre_btn;
    private javax.swing.JTable products_tbl;
    private javax.swing.JTextField purchaseCost_txt;
    private javax.swing.JTextField qtyOnBill_txt;
    private javax.swing.JButton refresh_btn;
    private javax.swing.JButton searchByCompany_btn;
    private javax.swing.JButton search_btn;
    private com.toedter.calendar.JDateChooser sellDate_chooser;
    private javax.swing.JTextField sellingPrice_txt;
    private javax.swing.JComboBox<String> served_cmb;
    private javax.swing.JButton showAll_btn;
    private javax.swing.JMenuItem stockCheck_mnu;
    private javax.swing.JCheckBox stockOutCheckBox;
    private javax.swing.JMenu time_mnu_lbl;
    private javax.swing.JLabel totalPrice_lbl;
    private javax.swing.JComboBox<String> type_cmb;
    private javax.swing.JButton update_btn;
    private javax.swing.JLabel userName_lbl;
    // End of variables declaration//GEN-END:variables
}
