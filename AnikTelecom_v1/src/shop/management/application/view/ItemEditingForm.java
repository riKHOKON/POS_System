/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package shop.management.application.view;

import java.awt.HeadlessException;
import java.awt.Image;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.InputStream;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.ImageIcon;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.filechooser.FileNameExtensionFilter;
import net.proteanit.sql.DbUtils;
import shop.management.application.DbConnector;
import shop.management.application.model.Product;
import shop.management.application.model.User;

/**
 *
 * @author rIslam
 */
public class ItemEditingForm extends javax.swing.JFrame {

    private String imagePath = null;
    private int pos = 0;
    private static User user = new User();
    /**
     * Creates new form ItemEditingForm
     * @throws java.sql.SQLException
     */
    public ItemEditingForm() throws SQLException {
        initComponents();
        showAllItemsInTable();
        fillComboBoxWithCategory();
        fillComboBoxWithCompany();
        fillComboBoxWithName();
        fillComboBoxWithSupplier();
        calculatingGrandTotal();
        Calendar now = Calendar.getInstance();
        date_choose.setDateFormatString("yyyy-MM-dd");
        date_choose.setDate(now.getTime() );
        sup_txt111111.setVisible(false);
        jButton5.setVisible(false);
        jButton6.setVisible(false);
        jButton7.setVisible(false);
        jButton8.setVisible(false);
    }
    public ItemEditingForm(User u) throws SQLException {
        initComponents();
        showAllItemsInTable();
        fillComboBoxWithCategory();
        fillComboBoxWithCompany();
        fillComboBoxWithName();
        fillComboBoxWithSupplier();
        calculatingGrandTotal();
        Calendar now = Calendar.getInstance();
        date_choose.setDateFormatString("yyyy-MM-dd");
        date_choose.setDate(now.getTime() );
        ItemEditingForm.user = u;
        sup_txt111111.setVisible(false);
        jButton5.setVisible(false);
        jButton6.setVisible(false);
        jButton7.setVisible(false);
        jButton8.setVisible(false);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        item_tbl = new javax.swing.JTable();
        jPanel2 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        id_lbl = new javax.swing.JLabel();
        name_txt = new javax.swing.JTextField();
        cat_cmb = new javax.swing.JComboBox<>();
        com_cmb = new javax.swing.JComboBox<>();
        pCost_txt = new javax.swing.JTextField();
        qty_txt = new javax.swing.JTextField();
        date_choose = new com.toedter.calendar.JDateChooser();
        sup_txt111111 = new javax.swing.JTextField();
        jScrollPane2 = new javax.swing.JScrollPane();
        des_txt = new javax.swing.JTextArea();
        jDesktopPane1 = new javax.swing.JDesktopPane();
        image_lbl = new javax.swing.JLabel();
        chooseImage_btn = new javax.swing.JButton();
        jLabel10 = new javax.swing.JLabel();
        jPanel3 = new javax.swing.JPanel();
        jLabel11 = new javax.swing.JLabel();
        id_txt = new javax.swing.JTextField();
        jButton1 = new javax.swing.JButton();
        name_cmb = new javax.swing.JComboBox<>();
        jButton2 = new javax.swing.JButton();
        category_cmb = new javax.swing.JComboBox<>();
        jButton3 = new javax.swing.JButton();
        company_cmb = new javax.swing.JComboBox<>();
        jButton4 = new javax.swing.JButton();
        jButton5 = new javax.swing.JButton();
        jButton6 = new javax.swing.JButton();
        jButton7 = new javax.swing.JButton();
        jButton8 = new javax.swing.JButton();
        jButton9 = new javax.swing.JButton();
        jCheckBox1 = new javax.swing.JCheckBox();
        jCheckBox2 = new javax.swing.JCheckBox();
        jPanel4 = new javax.swing.JPanel();
        jButton10 = new javax.swing.JButton();
        jButton11 = new javax.swing.JButton();
        jButton12 = new javax.swing.JButton();
        jButton13 = new javax.swing.JButton();
        jButton14 = new javax.swing.JButton();
        jButton15 = new javax.swing.JButton();
        pCostUpdate_txt = new javax.swing.JTextField();
        qtyUpdate_txt = new javax.swing.JTextField();
        jLabel12 = new javax.swing.JLabel();
        jButton16 = new javax.swing.JButton();
        sup_cmb = new javax.swing.JComboBox<>();
        itemInfo_lbl = new javax.swing.JLabel();
        totalqty_lbl = new javax.swing.JLabel();
        gTotal_lbl = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.DO_NOTHING_ON_CLOSE);
        setTitle("Add Or Update Item Information");

        jPanel1.setBackground(new java.awt.Color(153, 153, 153));
        jPanel1.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(204, 0, 0), 2, true));

        item_tbl.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {

            }
        ));
        item_tbl.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                item_tblMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(item_tbl);

        jPanel2.setBackground(new java.awt.Color(102, 102, 102));
        jPanel2.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Item Specefic Information", javax.swing.border.TitledBorder.LEFT, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 1, 11))); // NOI18N

        jLabel1.setText("Id :");

        jLabel2.setText("Name :");

        jLabel3.setText("Company :");

        jLabel4.setText("Category :");

        jLabel5.setText("Purchase Cost :");

        jLabel6.setText("Quantity :");

        jLabel7.setText("Inhouse Date :");

        jLabel8.setText("Supplier :");

        jLabel9.setText("Description :");

        name_txt.setFont(new java.awt.Font("Tahoma", 1, 10)); // NOI18N
        name_txt.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        name_txt.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 0, 0), 1, true));

        cat_cmb.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        cat_cmb.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 0, 0), 1, true));

        com_cmb.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        com_cmb.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 0, 0), 1, true));

        pCost_txt.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        pCost_txt.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        pCost_txt.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 0, 0), 1, true));

        qty_txt.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        qty_txt.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        qty_txt.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 0, 0), 1, true));

        date_choose.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 0, 0), 1, true));
        date_choose.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N

        sup_txt111111.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        sup_txt111111.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        sup_txt111111.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 0, 0), 1, true));

        des_txt.setColumns(20);
        des_txt.setRows(5);
        des_txt.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 0, 0), 1, true));
        jScrollPane2.setViewportView(des_txt);

        jDesktopPane1.setBackground(new java.awt.Color(0, 102, 0));

        jDesktopPane1.setLayer(image_lbl, javax.swing.JLayeredPane.DEFAULT_LAYER);

        javax.swing.GroupLayout jDesktopPane1Layout = new javax.swing.GroupLayout(jDesktopPane1);
        jDesktopPane1.setLayout(jDesktopPane1Layout);
        jDesktopPane1Layout.setHorizontalGroup(
            jDesktopPane1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jDesktopPane1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(image_lbl, javax.swing.GroupLayout.PREFERRED_SIZE, 279, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        jDesktopPane1Layout.setVerticalGroup(
            jDesktopPane1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jDesktopPane1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(image_lbl, javax.swing.GroupLayout.PREFERRED_SIZE, 266, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        chooseImage_btn.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        chooseImage_btn.setIcon(new javax.swing.ImageIcon(getClass().getResource("/shop/management/application/res/chooseImg.png"))); // NOI18N
        chooseImage_btn.setText("Choose Image");
        chooseImage_btn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                chooseImage_btnActionPerformed(evt);
            }
        });

        jLabel10.setText("Image");

        jPanel3.setBackground(new java.awt.Color(102, 102, 102));
        jPanel3.setBorder(javax.swing.BorderFactory.createTitledBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 0, 0), 1, true), "Search Item", javax.swing.border.TitledBorder.RIGHT, javax.swing.border.TitledBorder.DEFAULT_POSITION));

        jLabel11.setText("ID :");

        id_txt.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        id_txt.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        id_txt.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 0, 0), 1, true));

        jButton1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/shop/management/application/res/zoom-icon.png"))); // NOI18N
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        name_cmb.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        name_cmb.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 0, 0), 1, true));

        jButton2.setIcon(new javax.swing.ImageIcon(getClass().getResource("/shop/management/application/res/zoom-icon.png"))); // NOI18N
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        category_cmb.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        category_cmb.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 0, 0), 1, true));

        jButton3.setIcon(new javax.swing.ImageIcon(getClass().getResource("/shop/management/application/res/zoom-icon.png"))); // NOI18N
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });

        company_cmb.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        company_cmb.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 0, 0), 1, true));

        jButton4.setIcon(new javax.swing.ImageIcon(getClass().getResource("/shop/management/application/res/zoom-icon.png"))); // NOI18N
        jButton4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton4ActionPerformed(evt);
            }
        });

        jButton5.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jButton5.setIcon(new javax.swing.ImageIcon(getClass().getResource("/shop/management/application/res/frist.png"))); // NOI18N
        jButton5.setText("Frist");
        jButton5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton5ActionPerformed(evt);
            }
        });

        jButton6.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jButton6.setIcon(new javax.swing.ImageIcon(getClass().getResource("/shop/management/application/res/next.png"))); // NOI18N
        jButton6.setText("Next");
        jButton6.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton6ActionPerformed(evt);
            }
        });

        jButton7.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jButton7.setIcon(new javax.swing.ImageIcon(getClass().getResource("/shop/management/application/res/last.png"))); // NOI18N
        jButton7.setText("Last");
        jButton7.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton7ActionPerformed(evt);
            }
        });

        jButton8.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jButton8.setIcon(new javax.swing.ImageIcon(getClass().getResource("/shop/management/application/res/pre.png"))); // NOI18N
        jButton8.setText("Pre.");
        jButton8.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton8ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addComponent(category_cmb, javax.swing.GroupLayout.Alignment.LEADING, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel3Layout.createSequentialGroup()
                                .addContainerGap()
                                .addComponent(jLabel11, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(id_txt, javax.swing.GroupLayout.PREFERRED_SIZE, 107, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(jPanel3Layout.createSequentialGroup()
                                .addComponent(jButton3, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(company_cmb, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                            .addComponent(name_cmb, javax.swing.GroupLayout.PREFERRED_SIZE, 216, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addGap(36, 36, 36)
                        .addComponent(jButton5)
                        .addGap(18, 18, 18)
                        .addComponent(jButton6)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jButton8)
                        .addGap(18, 18, 18)
                        .addComponent(jButton7)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jButton2, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButton4, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE)))
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jLabel11)
                        .addComponent(id_txt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 17, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jButton2, javax.swing.GroupLayout.PREFERRED_SIZE, 17, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(name_cmb, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jButton4, javax.swing.GroupLayout.PREFERRED_SIZE, 17, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(category_cmb, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                    .addComponent(jButton3, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 17, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(company_cmb, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE))
                .addGap(9, 9, 9)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jButton5)
                    .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jButton7)
                        .addComponent(jButton8)
                        .addComponent(jButton6)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jButton9.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jButton9.setIcon(new javax.swing.ImageIcon(getClass().getResource("/shop/management/application/res/icons8-broom-30.png"))); // NOI18N
        jButton9.setText("Clear");
        jButton9.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton9ActionPerformed(evt);
            }
        });

        jCheckBox1.setText("available");

        jCheckBox2.setText("stock out");

        jPanel4.setBackground(new java.awt.Color(102, 102, 102));
        jPanel4.setBorder(javax.swing.BorderFactory.createTitledBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 0, 0), 1, true), "Controls", javax.swing.border.TitledBorder.LEFT, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 1, 11))); // NOI18N

        jButton10.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jButton10.setIcon(new javax.swing.ImageIcon(getClass().getResource("/shop/management/application/res/new Item.png"))); // NOI18N
        jButton10.setText("Add New");
        jButton10.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton10ActionPerformed(evt);
            }
        });

        jButton11.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jButton11.setIcon(new javax.swing.ImageIcon(getClass().getResource("/shop/management/application/res/refresh.png"))); // NOI18N
        jButton11.setText("Update Qty  & Price");
        jButton11.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton11ActionPerformed(evt);
            }
        });

        jButton12.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jButton12.setIcon(new javax.swing.ImageIcon(getClass().getResource("/shop/management/application/res/exit.png"))); // NOI18N
        jButton12.setText("Delete");
        jButton12.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton12ActionPerformed(evt);
            }
        });

        jButton13.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jButton13.setIcon(new javax.swing.ImageIcon(getClass().getResource("/shop/management/application/res/alll.png"))); // NOI18N
        jButton13.setText("All");
        jButton13.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton13ActionPerformed(evt);
            }
        });

        jButton14.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jButton14.setIcon(new javax.swing.ImageIcon(getClass().getResource("/shop/management/application/res/homess.png"))); // NOI18N
        jButton14.setText("Home");
        jButton14.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton14ActionPerformed(evt);
            }
        });

        jButton15.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jButton15.setIcon(new javax.swing.ImageIcon(getClass().getResource("/shop/management/application/res/refresh-icon.png"))); // NOI18N
        jButton15.setText("Refresh");
        jButton15.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton15ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addGap(93, 93, 93)
                .addComponent(jButton13, javax.swing.GroupLayout.PREFERRED_SIZE, 101, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(42, 42, 42)
                .addComponent(jButton14, javax.swing.GroupLayout.PREFERRED_SIZE, 101, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel4Layout.createSequentialGroup()
                .addGap(38, 38, 38)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jButton15, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(jPanel4Layout.createSequentialGroup()
                        .addComponent(jButton10)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jButton11, javax.swing.GroupLayout.PREFERRED_SIZE, 204, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButton12)))
                .addGap(39, 39, 39))
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jButton10, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jButton11, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jButton12, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(18, 18, 18)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton13, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jButton14, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jButton15)
                .addGap(19, 19, 19))
        );

        pCostUpdate_txt.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        pCostUpdate_txt.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        pCostUpdate_txt.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 0, 0), 1, true));

        qtyUpdate_txt.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        qtyUpdate_txt.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        qtyUpdate_txt.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 0, 0), 1, true));

        jLabel12.setText("0120.rashedul@gmail.com");

        jButton16.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jButton16.setIcon(new javax.swing.ImageIcon(getClass().getResource("/shop/management/application/res/cross-circle-frame-icon.png"))); // NOI18N
        jButton16.setText("Close");
        jButton16.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton16ActionPerformed(evt);
            }
        });

        sup_cmb.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        sup_cmb.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 0, 0), 1, true));

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jButton9)
                .addGap(45, 45, 45)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jLabel8, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jLabel7, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jLabel6, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jLabel5, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jLabel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jLabel4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jLabel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jLabel9, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(sup_txt111111, javax.swing.GroupLayout.Alignment.TRAILING))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(id_lbl, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(name_txt)
                    .addComponent(cat_cmb, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(com_cmb, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(date_choose, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jScrollPane2)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addComponent(qty_txt, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 84, Short.MAX_VALUE)
                            .addComponent(pCost_txt, javax.swing.GroupLayout.Alignment.LEADING))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(pCostUpdate_txt)
                            .addComponent(qtyUpdate_txt, javax.swing.GroupLayout.DEFAULT_SIZE, 87, Short.MAX_VALUE)))
                    .addComponent(sup_cmb, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel2Layout.createSequentialGroup()
                                .addComponent(jCheckBox1)
                                .addGap(2, 2, 2)
                                .addComponent(jCheckBox2)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 133, Short.MAX_VALUE)
                                .addComponent(jLabel10))
                            .addComponent(jDesktopPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jPanel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jPanel4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addContainerGap())
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGap(74, 74, 74)
                        .addComponent(chooseImage_btn, javax.swing.GroupLayout.PREFERRED_SIZE, 180, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel12, javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                                .addComponent(jButton16, javax.swing.GroupLayout.PREFERRED_SIZE, 272, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(89, 89, 89))))))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jPanel4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jCheckBox1, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jCheckBox2, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel10))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jDesktopPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(jButton16, javax.swing.GroupLayout.PREFERRED_SIZE, 16, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel12))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(chooseImage_btn)
                        .addGap(0, 11, Short.MAX_VALUE))))
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(id_lbl, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jLabel1)
                        .addComponent(jButton9, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(name_txt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel4)
                    .addComponent(cat_cmb, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel3)
                    .addComponent(com_cmb, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel5)
                    .addComponent(pCost_txt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(pCostUpdate_txt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel6)
                    .addComponent(qty_txt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(qtyUpdate_txt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(13, 13, 13)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel7)
                    .addComponent(date_choose, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel8)
                    .addComponent(sup_cmb, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(jLabel9)
                        .addGap(33, 33, 33)
                        .addComponent(sup_txt111111, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 77, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(35, 35, 35))
        );

        itemInfo_lbl.setFont(new java.awt.Font("Tahoma", 0, 10)); // NOI18N

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addComponent(itemInfo_lbl, javax.swing.GroupLayout.PREFERRED_SIZE, 711, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(totalqty_lbl, javax.swing.GroupLayout.PREFERRED_SIZE, 199, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(gTotal_lbl, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(jScrollPane1)
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 237, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addComponent(itemInfo_lbl, javax.swing.GroupLayout.PREFERRED_SIZE, 12, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(totalqty_lbl, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(gTotal_lbl, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void item_tblMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_item_tblMouseClicked
       PreparedStatement pst = null;
        Connection con = DbConnector.ConnectDB();
        ResultSet rs = null;
        int row = item_tbl.getSelectedRow();
        String index = (item_tbl.getModel().getValueAt(row, 0).toString());
        try {
            String query = "SELECT * FROM products WHERE ProductId = '"+index+"'";
            pst = con.prepareStatement(query);
            rs = pst.executeQuery();
            if (rs.next()) {
                int productId = rs.getInt("ProductId");
                id_lbl.setText(Integer.toString(productId));
                String name = rs.getString("Name");
                name_txt.setText(name);
                String cat = rs.getString("Category");
                cat_cmb.setSelectedItem((String)cat);
                String com = rs.getString("Company");
                com_cmb.setSelectedItem((String)com);
                float pCost = rs.getFloat("PurchaseCost");
                pCost_txt.setText(Float.toString(pCost));
                int qty = rs.getInt("Quantity");
                qty_txt.setText(Integer.toString(qty));
                String dateValue = rs.getString("InhouseDate");
                java.util.Date date = new SimpleDateFormat("yyyy-MM-dd").parse(dateValue);
                date_choose.setDate(date);
                byte[] imageData = rs.getBytes("Image");
                image_lbl.setIcon(resizeImage(null, imageData,image_lbl.getWidth(), image_lbl.getHeight(),Image.SCALE_SMOOTH)); 
                String supplier = rs.getString("Supplier");
                sup_txt111111.setText(supplier);
                sup_cmb.setSelectedItem(supplier);
                String des = rs.getString("Description");
                des_txt.setText(des);
                String tk = "৳";
                itemInfo_lbl.setText("Name : "+name_txt.getText()+", Price : "+tk+" "+Float.toString(pCost)+", Qty : "+Integer.toString(qty)+", Total Price : "+tk+" "+Float.toString((float)(pCost * qty)));
                if (qty > 0) {
                    jCheckBox1.setSelected(true);
                    jCheckBox2.setSelected(false);
                }else{
                    jCheckBox1.setSelected(false);
                    jCheckBox2.setSelected(true);
                }
                System.gc();
            }
        } catch (SQLException | ParseException e) {
            JOptionPane.showMessageDialog(null, e);
        }
        finally{
            try {
                rs.close();
                pst.close();
                con.close();
            } catch (SQLException e) {
            
            }
        }
    }//GEN-LAST:event_item_tblMouseClicked

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        String name = (String)name_cmb.getSelectedItem();
        searchItemsByName(name);
        name_cmb.setSelectedItem(null);
    }//GEN-LAST:event_jButton2ActionPerformed

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        try {
            String value = (String)category_cmb.getSelectedItem();
            searchItemsByType(value);  
            calculatingGrandTotal(value);
            category_cmb.setSelectedItem(null);
            itemInfo_lbl.setText("");
        } catch (SQLException e) {
        }
    }//GEN-LAST:event_jButton3ActionPerformed

    private void jButton4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton4ActionPerformed
        try {
            String value = (String)company_cmb.getSelectedItem();
            searchItemsByCompany(value);
            calculatingGrandTotalCompanyWise(value);
            itemInfo_lbl.setText("");
            company_cmb.setSelectedItem(null);
        } catch (SQLException e) {
        }
    }//GEN-LAST:event_jButton4ActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        PreparedStatement pst = null;
        Connection con = DbConnector.ConnectDB();
        ResultSet rs = null;
        if (!"".equals(id_txt.getText())) {
            try {
                String sql = "SELECT * FROM products WHERE ProductId = '"+id_txt.getText()+"'"; 
                pst = con.prepareStatement(sql);
                rs = pst.executeQuery();
                item_tbl.setModel(DbUtils.resultSetToTableModel(rs));
                itemInfo_lbl.setText("");
                id_txt.setText("");
        
            } catch (SQLException e) {
                JOptionPane.showMessageDialog(null, e);
            } finally{
                try {
                    rs.close();
                    pst.close();
                    con.close();
                    System.gc();
                } catch (SQLException e) {
                }
            }
        }else{
            JOptionPane.showMessageDialog(null, "Confirm id frist.");
        }
        
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jButton5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton5ActionPerformed
//        pos = 0;
//        try {
//            showSelectedProduct(pos);
//            System.gc();
//        } catch (SQLException ex) {
//           
//        }
    }//GEN-LAST:event_jButton5ActionPerformed

    private void jButton6ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton6ActionPerformed
//        pos++;
//        try {
//            if (pos >= getAllItems().size()) {
//                pos = getAllItems().size()-1;
//            }
//            showSelectedProduct(pos);
//            System.gc();
//            //getAllItems().clear();
//        } catch (SQLException ex) {
//           
//        }
    }//GEN-LAST:event_jButton6ActionPerformed

    private void jButton8ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton8ActionPerformed
//        pos--;
//        try {
//            if (pos < 0) {
//                pos = 0;
//            }
//            showSelectedProduct(pos);
//            System.gc();
//        } catch (SQLException ex) {
//           
//        }
    }//GEN-LAST:event_jButton8ActionPerformed

    private void jButton7ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton7ActionPerformed
//        try {
//            pos = getAllItems().size() - 1;
//            showSelectedProduct(pos);
//            //getAllItems().clear();
//            System.gc();
//        } catch (SQLException ex) {
//           
//        }
    }//GEN-LAST:event_jButton7ActionPerformed

    private void jButton9ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton9ActionPerformed
        clearAllFields();
        System.gc();
       itemInfo_lbl.setText("");
    }//GEN-LAST:event_jButton9ActionPerformed

    private void chooseImage_btnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_chooseImage_btnActionPerformed
        JFileChooser file = new JFileChooser();
        file.setCurrentDirectory(new File(System.getProperty("user.home")));
        FileNameExtensionFilter filter = new FileNameExtensionFilter("*.images","jpg","png");
        file.addChoosableFileFilter(filter);
        int result = file.showSaveDialog(null);
        if (result == JFileChooser.APPROVE_OPTION) {
            File selectedFile = file.getSelectedFile();
            String path = selectedFile.getAbsolutePath();
            image_lbl.setIcon(resizeImage(path,null, image_lbl.getWidth(), image_lbl.getHeight(), Image.SCALE_SMOOTH));
            imagePath = path;
        }else{
            JOptionPane.showMessageDialog(null,"Image not selected.");               
        }
    }//GEN-LAST:event_chooseImage_btnActionPerformed

    private void jButton15ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton15ActionPerformed
        try { 
            new ItemEditingForm().setVisible(true);
            this.dispose();
            System.gc();
        } catch (SQLException ex) {
                
        }
    }//GEN-LAST:event_jButton15ActionPerformed

    private void jButton10ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton10ActionPerformed
       PreparedStatement pst = null;
       Connection con = null;
       ResultSet rs = null;
        if (checkInputs() && imagePath != null) {
            try {
                con = DbConnector.ConnectDB();
                boolean isContain = false;
                String check = "SELECT * FROM products WHERE Name = '"+name_txt.getText()+"'";              
                pst = con.prepareStatement(check);
                rs = pst.executeQuery();
                if (rs.next()) {
                    isContain = true;
                    JOptionPane.showMessageDialog(null, name_txt.getText()+" Already exists.\nYou can't insert it.\nPlease update it's information.");
                }else{
                    double amount = 0;
                    String updateQuery = null;
                    pst = null;
                    updateQuery = "SELECT * FROM cashwalet";
                    pst = con.prepareStatement(updateQuery);
                    rs = pst.executeQuery();
                    if (rs.next()) {
                        amount += rs.getDouble("Amount");
                    }
                    if (amount >= Float.parseFloat(pCost_txt.getText()) * Integer.parseInt(qty_txt.getText())) {
                        int v = JOptionPane.showConfirmDialog(null, "Do you really want to add!","add",JOptionPane.YES_NO_OPTION);
                        if (v == 0) {
                            updateQuery = null;
                            updateQuery = "UPDATE cashwalet SET Amount = ? WHERE CashWaletId = ?";
                            pst = con.prepareStatement(updateQuery);
                            pst.setDouble(1,(amount - Float.parseFloat(pCost_txt.getText()) * Integer.parseInt(qty_txt.getText())));
                            pst.setInt(2, 1);
                            pst.executeUpdate();
                            amount = 0;
                            /******************************************/
                            // updating expence information while new item is inserted.
                            /******************************************/
                            pst = null;
                            pst = con.prepareStatement("INSERT INTO expensesforinhouseproduct (Description,Date, ExpensedBy,Amount) VALUES (?,?,?,?)");
                            pst.setString(1, "New Product inhouse:\n["+name_txt.getText()+"]\nPrice :"+Float.parseFloat(pCost_txt.getText())+"\nQty :"+Integer.parseInt(qty_txt.getText()));
                            SimpleDateFormat dateformate = new SimpleDateFormat("yyyy-MM-dd");
                            String adddDate = dateformate.format(date_choose.getDate());
                            pst.setString(2, adddDate);
                            pst.setString(3, user.getUserName());
                            pst.setFloat(4, Float.parseFloat(pCost_txt.getText()) * Integer.parseInt(qty_txt.getText()));
                            pst.executeUpdate();

                            // now adding the actual item.
                            pst = null;
                            int i = 0;
                            do {
                                pst = con.prepareStatement("INSERT INTO products (Name,Category,Company,PurchaseCost,Quantity,InhouseDate,Image,Supplier,Description) VALUES (?,?,?,?,?,?,?,?,?)");
                                pst.setString(1,name_txt.getText());
                                pst.setString(2,cat_cmb.getSelectedItem().toString());
                                pst.setString(3, (String)com_cmb.getSelectedItem());
                                pst.setFloat(4,Float.parseFloat(pCost_txt.getText()));
                                pst.setInt(5,Integer.parseInt(qty_txt.getText()));
                            
                                SimpleDateFormat dateFormate = new SimpleDateFormat("yyyy-MM-dd");
                                String addDate = dateFormate.format(date_choose.getDate());
                            
                                pst.setString(6, addDate);
                            
                                InputStream img = new FileInputStream(new File(imagePath));
                            
                                pst.setBlob(7, img);
                                pst.setString(8, sup_cmb.getSelectedItem().toString());
                                pst.setString(9, des_txt.getText());
                                pst.executeUpdate();
                                showAllItemsInTable();
                                JOptionPane.showMessageDialog(null, "Product added successfully.");
                                calculatingGrandTotal();
                                clearAllFields();
                                itemInfo_lbl.setText("");
                                i++;
                                // creating new ledger for this item here
                                
                                
                                
                                
                            } while (i < 1 && isContain == false);
                            System.gc();
                        }
                            
                    }else{
                        JOptionPane.showMessageDialog(null, "Sorry Cash Limit exceeded.Please Cash in to CashWalet.");
                    }          
                }
            } catch (FileNotFoundException | SQLException e) {
                JOptionPane.showMessageDialog(null, e.getMessage());
            }
            finally{
                try {
                    rs.close();
                    pst.close();
                    con.close();
                    clearAllFields();
                    System.gc();
                } catch (SQLException ex) {
                   
                }
            }      
        }else{
            JOptionPane.showMessageDialog(null,"One or more Input fields are empty !");
        }
    }//GEN-LAST:event_jButton10ActionPerformed

    private void jButton11ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton11ActionPerformed
//        if ("".equals(pCostUpdate_txt.getText()) && "".equals(qtyUpdate_txt.getText())) {
//            JOptionPane.showMessageDialog(null, "Fill up Qty and Price frist.");
//        }else if(Integer.parseInt(qtyUpdate_txt.getText()) == 0){
//            JOptionPane.showMessageDialog(null, "0 is not valid !");
//        }
//        else{
//            if (checkUpdateInputs() && id_lbl.getText() != null) {
//                String updateQuery = null;
//                PreparedStatement ps = null;
//                ResultSet rs = null;
//                Connection con = DbConnector.ConnectDB();
//            
//                try {
//                    double amount = 0;
//                    updateQuery = "SELECT * FROM cashwalet";
//                    ps = con.prepareStatement(updateQuery);
//                    rs = ps.executeQuery();
//                    if (rs.next()) {
//                        amount += rs.getDouble("Amount");
//                    }
//                    if (amount >= Float.parseFloat(pCostUpdate_txt.getText()) * Integer.parseInt(qtyUpdate_txt.getText())) {
//                        int value = JOptionPane.showConfirmDialog(null, "Do you really want to update!","Update",JOptionPane.YES_NO_OPTION);
//                        if (value == 0) {
//                            updateQuery = null;
//                            updateQuery = "UPDATE cashwalet SET Amount = ? WHERE CashWaletId = ?";
//                            
//                            ps.setDouble(1,(amount - Float.parseFloat(pCostUpdate_txt.getText()) * Integer.parseInt(qtyUpdate_txt.getText())));
//                            ps.setInt(2, 1);
//                            ps.executeUpdate();
//                            updateQuery = null;
//                            amount = 0;
//                        /*
//                            updating expensedforinhouseproducts
//                        
//                        */
//                            ps = null;
//                            ps = con.prepareStatement("INSERT INTO expensesforinhouseproduct (Description,Date, ExpensedBy,Amount) VALUES (?,?,?,?)");
//                            ps.setString(1, "Product price & qty update:\n["+name_txt.getText()+"]\nPrice :"+Float.parseFloat(pCostUpdate_txt.getText())+"\nQty :"+Integer.parseInt(qtyUpdate_txt.getText()));
//                            SimpleDateFormat dateformate = new SimpleDateFormat("yyyy-MM-dd");
//                            String adddDate = dateformate.format(date_choose.getDate());
//                            ps.setString(2, adddDate);
//                            ps.setString(3, user.getUserName());
//                            ps.setFloat(4, Float.parseFloat(pCostUpdate_txt.getText()) * Integer.parseInt(qtyUpdate_txt.getText()));
//                            ps.executeUpdate();
//                            ps = null;
//                    // updating without image
//                            if (imagePath == null) {
//                                updateQuery = "UPDATE products SET "
//                                    +"PurchaseCost = ?,Quantity = ?,InhouseDate = ? WHERE ProductId = ?";
//                                try {
// 
//                                    ps = con.prepareStatement(updateQuery);
//                                    ps.setString(1,pCostUpdate_txt.getText());
//                                    ps.setInt(2,Integer.parseInt(qty_txt.getText()) + Integer.parseInt(qtyUpdate_txt.getText()));
//                                    SimpleDateFormat dateFormate = new SimpleDateFormat("yyyy-MM-dd");
//                                    String addDate = dateFormate.format(date_choose.getDate());
//                                    ps.setString(3, addDate);
//                                    ps.setInt(4, Integer.parseInt(id_lbl.getText()));
//                                    ps.executeUpdate();
//                                    showAllItemsInTable();
//                                    JOptionPane.showMessageDialog(null, "Product information updated successfully.");
//                                    calculatingGrandTotal();
//                                    clearAllFields();
//                                    itemInfo_lbl.setText("");
//                    
//                                } catch (SQLException e) {
//                                    JOptionPane.showMessageDialog(null, e.getMessage());
//                                }
//                                finally{
//                                    try {
//                                        ps.close();
//                                        con.close();
//                                        clearAllFields();
//                                        System.gc();
//                                    } catch (SQLException ex) {
//                        
//                                    }   
//                                }  
//                            }else{
//                            // updating with image
//                                try{
//                                    InputStream img = new FileInputStream(imagePath);    
//                                    updateQuery = "UPDATE products SET "
//                                        +" PurchaseCost = ?,Quantity = ?, InhouseDate = ?, Image = ? WHERE ProductId = ?";
//                    
//                                    ps = con.prepareStatement(updateQuery);
//                                    ps.setString(1,pCostUpdate_txt.getText());
//                                    ps.setInt(2,Integer.parseInt(qty_txt.getText()) + Integer.parseInt(qtyUpdate_txt.getText()));
//                                    SimpleDateFormat dateFormate = new SimpleDateFormat("yyyy-MM-dd");
//                                    String addDate = dateFormate.format(date_choose.getDate());
//                                    ps.setString(3, addDate);
//                                    ps.setBlob(4,img);
//                                    ps.setInt(5, Integer.parseInt(id_lbl.getText()));
//                                    ps.executeUpdate();
//                                    showAllItemsInTable();
//                                    calculatingGrandTotal();
//                                    clearAllFields();
//                                    JOptionPane.showMessageDialog(null, "Product information updated successfully."); 
//                                    itemInfo_lbl.setText("");
//                    
//                                }catch(HeadlessException | FileNotFoundException | NumberFormatException | SQLException e){
//                                    JOptionPane.showMessageDialog(null, e.getMessage());
//                                }
//                                finally{
//                                    try {
//                                        ps.close();
//                                        con.close();
//                                        clearAllFields();
//                                        System.gc();
//                                    } catch (SQLException ex) {
//                       
//                                    }
//                                }
//               
//                            }
//                        }
//                        
//                    }else{
//                        JOptionPane.showMessageDialog(null, "Taka nai ..........!");
//                        clearAllFields();
//                    }
//                } catch (SQLException e) {
//                
//                }   
//            }
//            else{
//                JOptionPane.showMessageDialog(null, "Error ! Couldn't update product.");
//                clearAllFields();
//            }
//        }
            if ("".equals(pCostUpdate_txt.getText()) && "".equals(qtyUpdate_txt.getText())) {
            JOptionPane.showMessageDialog(null, "Fill up Qty and Price frist.");
        }else if(Integer.parseInt(qtyUpdate_txt.getText()) == 0){
            JOptionPane.showMessageDialog(null, "0 is not valid !");
        }
        else{
            if (checkUpdateInputs() && id_lbl.getText() != null) {
                String updateQuery = null;
                PreparedStatement ps = null;
                ResultSet rs = null;
                Connection con = DbConnector.ConnectDB();
            
                try {
                    double amount = 0;
                    updateQuery = "SELECT * FROM cashwalet";
                    ps = con.prepareStatement(updateQuery);
                    rs = ps.executeQuery();
                    if (rs.next()) {
                        amount += rs.getDouble("Amount");
                    }
                    if (amount >= Float.parseFloat(pCostUpdate_txt.getText()) * Integer.parseInt(qtyUpdate_txt.getText())) {
                        int value = JOptionPane.showConfirmDialog(null, "Do you really want to update!","Update",JOptionPane.YES_NO_OPTION);
                        if (value == 0) {
                            updateQuery = null;
                            updateQuery = "UPDATE cashwalet SET Amount = ? WHERE CashWaletId = ?";
                            ps = con.prepareStatement(updateQuery);
                            ps.setDouble(1,(amount - Float.parseFloat(pCostUpdate_txt.getText()) * Integer.parseInt(qtyUpdate_txt.getText())));
                            ps.setInt(2, 1);
                            ps.executeUpdate();
                            updateQuery = null;
                            amount = 0;
                        /*
                            updating expensedforinhouseproducts
                        
                        */
                            ps = null;
                            ps = con.prepareStatement("INSERT INTO expensesforinhouseproduct (Description,Date, ExpensedBy,Amount) VALUES (?,?,?,?)");
                            ps.setString(1, "Product price & qty update:\n["+name_txt.getText()+"]\nPrice :"+Float.parseFloat(pCostUpdate_txt.getText())+"\nQty :"+Integer.parseInt(qtyUpdate_txt.getText()));
                            SimpleDateFormat dateformate = new SimpleDateFormat("yyyy-MM-dd");
                            String adddDate = dateformate.format(date_choose.getDate());
                            ps.setString(2, adddDate);
                            ps.setString(3, user.getUserName());
                            ps.setFloat(4, Float.parseFloat(pCostUpdate_txt.getText()) * Integer.parseInt(qtyUpdate_txt.getText()));
                            ps.executeUpdate();
                            ps = null;
                    // updating without image
                            if (imagePath == null) {
                                updateQuery = "UPDATE products SET "
                                    +"PurchaseCost = ?,Quantity = ?,InhouseDate = ? WHERE ProductId = ?";
                                try {
 
                                    ps = con.prepareStatement(updateQuery);
                                    ps.setString(1,pCostUpdate_txt.getText());
                                    ps.setInt(2,Integer.parseInt(qty_txt.getText()) + Integer.parseInt(qtyUpdate_txt.getText()));
                                    SimpleDateFormat dateFormate = new SimpleDateFormat("yyyy-MM-dd");
                                    String addDate = dateFormate.format(date_choose.getDate());
                                    ps.setString(3, addDate);
                                    ps.setInt(4, Integer.parseInt(id_lbl.getText()));
                                    ps.executeUpdate();
                                    showAllItemsInTable();
                                    JOptionPane.showMessageDialog(null, "Product information updated successfully.");
                                    calculatingGrandTotal();
                                    clearAllFields();
                                    itemInfo_lbl.setText("");
                    
                                } catch (SQLException e) {
                                    JOptionPane.showMessageDialog(null, e.getMessage());
                                }
                                finally{
                                    try {
                                        ps.close();
                                        con.close();
                                        clearAllFields();
                                        System.gc();
                                    } catch (SQLException ex) {
                        
                                    }   
                                }  
                            }else{
                            // updating with image
                                try{
                                    InputStream img = new FileInputStream(imagePath);    
                                    updateQuery = "UPDATE products SET "
                                        +" PurchaseCost = ?,Quantity = ?, InhouseDate = ?, Image = ? WHERE ProductId = ?";
                    
                                    ps = con.prepareStatement(updateQuery);
                                    ps.setString(1,pCostUpdate_txt.getText());
                                    ps.setInt(2,Integer.parseInt(qty_txt.getText()) + Integer.parseInt(qtyUpdate_txt.getText()));
                                    SimpleDateFormat dateFormate = new SimpleDateFormat("yyyy-MM-dd");
                                    String addDate = dateFormate.format(date_choose.getDate());
                                    ps.setString(3, addDate);
                                    ps.setBlob(4,img);
                                    ps.setInt(5, Integer.parseInt(id_lbl.getText()));
                                    ps.executeUpdate();
                                    showAllItemsInTable();
                                    calculatingGrandTotal();
                                    clearAllFields();
                                    JOptionPane.showMessageDialog(null, "Product information updated successfully."); 
                                    itemInfo_lbl.setText("");
                    
                                }catch(HeadlessException | FileNotFoundException | NumberFormatException | SQLException e){
                                    JOptionPane.showMessageDialog(null, e.getMessage());
                                }
                                finally{
                                    try {
                                        ps.close();
                                        con.close();
                                        clearAllFields();
                                        System.gc();
                                    } catch (SQLException ex) {
                       
                                    }
                                }
               
                            }
                        }
                        
                    }else{
                        JOptionPane.showMessageDialog(null, "Taka nai ..........!");
                        clearAllFields();
                    }
                } catch (SQLException e) {
                
                }   
            }
            else{
                JOptionPane.showMessageDialog(null, "Error ! Couldn't update product.");
                clearAllFields();
            }
        }
    }//GEN-LAST:event_jButton11ActionPerformed

    private void jButton13ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton13ActionPerformed
        showAllItemsInTable();
        System.gc();
    }//GEN-LAST:event_jButton13ActionPerformed

    private void jButton14ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton14ActionPerformed
        this.dispose();
        System.gc();
         java.awt.EventQueue.invokeLater(() -> {
            new ActivitiesForm(user).setVisible(true);
        });
    }//GEN-LAST:event_jButton14ActionPerformed

    private void jButton12ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton12ActionPerformed
        PreparedStatement ps = null;
        Connection con = null;
        if (!id_lbl.getText().equals("")) {
            con = DbConnector.ConnectDB();
            int value = JOptionPane.showConfirmDialog(null, "Do you really want to delete!","Delete",JOptionPane.YES_NO_OPTION);
            if (value == 0) {
                try {
                ps = con.prepareStatement("DELETE FROM products WHERE ProductId = ?");
                int id = Integer.parseInt(id_lbl.getText());
                ps.setInt(1, id);
                ps.executeUpdate();
                JOptionPane.showMessageDialog(null, "Product deleted successfully.");
                showAllItemsInTable();
                calculatingGrandTotal();
                itemInfo_lbl.setText("");
                
            } catch (SQLException ex) {
               
            }
            finally{
                try {
                    ps.close();
                    con.close();
                    System.gc();
                } catch (SQLException ex) {
                    
                }
                clearAllFields();  
            }
            }
                
        }
        else{
           JOptionPane.showMessageDialog(null, "Product is not deleted. Please confirm product id.");
        }
    }//GEN-LAST:event_jButton12ActionPerformed

    private void jButton16ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton16ActionPerformed
        java.awt.EventQueue.invokeLater(() -> {
            new ActivitiesForm(user).setVisible(true);
            System.gc();
        });
        this.dispose();
    }//GEN-LAST:event_jButton16ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(ItemEditingForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(ItemEditingForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(ItemEditingForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(ItemEditingForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(() -> {
            try {
                new ItemEditingForm().setVisible(true);
            } catch (SQLException ex) {
                
            }
        });
    }
    private void showAllItemsInTable(){
        PreparedStatement pst = null;
        Connection con = DbConnector.ConnectDB();
        ResultSet rs = null;
        try {
            String sql = "SELECT * FROM products"; 
            pst =con.prepareStatement(sql);
            rs=pst.executeQuery();
         
            item_tbl.setModel(DbUtils.resultSetToTableModel(rs));
         
        }catch (SQLException e) {
            JOptionPane.showMessageDialog(null, e);
        }finally{
            try {
                rs.close();
                pst.close();
                con.close();
                System.gc();        
            } catch (SQLException e) {
            
            }
        }
    }
    public ImageIcon resizeImage(String imagePath, byte[] pic, int width, int height, int SCALE_SMOOTH){
        ImageIcon myImage = null;
        if (imagePath != null) {
            myImage = new ImageIcon(imagePath);
        }else{
            myImage = new ImageIcon(pic);
        }
        Image img = myImage.getImage();
        Image img2 = img.getScaledInstance(image_lbl.getWidth(), image_lbl.getHeight(),Image.SCALE_SMOOTH);
        ImageIcon image = new ImageIcon(img2);
        System.gc();
        return image;
        
    }
    private void fillComboBoxWithCategory(){
        PreparedStatement pst = null;
        Connection con = DbConnector.ConnectDB();
        ResultSet rs = null;
        try {
            String sql = "SELECT * FROM categories"; 
            pst = con.prepareStatement(sql);
            rs = pst.executeQuery();
            while (rs.next()) {
                    cat_cmb.addItem(rs.getString(2));
                    category_cmb.addItem(rs.getString(2));
            }
        } 
        catch (SQLException e) {
               JOptionPane.showMessageDialog(null, e);
        } finally{
            try {
                    rs.close();
                    pst.close();
                    con.close();
                    System.gc();
            } catch (SQLException e) {
            
            }
        }
    }
    private void fillComboBoxWithCompany(){
        PreparedStatement pst = null;
        Connection con = DbConnector.ConnectDB();
        ResultSet rs = null;
        try {
            String sql = "SELECT * FROM companies"; 
            pst = con.prepareStatement(sql);
            rs = pst.executeQuery();
            while (rs.next()) {
                    com_cmb.addItem(rs.getString(2));   
                    company_cmb.addItem(rs.getString(2));
                }
            } catch (SQLException e) {
                JOptionPane.showMessageDialog(null, e);
            } finally{
                try {
                    rs.close();
                    pst.close();
                    con.close();
                    System.gc();
                } catch (SQLException e) {
            }
        }
    }
    private void fillComboBoxWithSupplier(){
        PreparedStatement pst = null;
        Connection con = DbConnector.ConnectDB();
        ResultSet rs = null;
        try {
            String sql = "SELECT * FROM suppliers"; 
            pst = con.prepareStatement(sql);
            rs = pst.executeQuery();
            while (rs.next()) {
                    sup_cmb.addItem(rs.getString(2));   
                    //company_cmb.addItem(rs.getString(2));
                }
            } catch (SQLException e) {
                JOptionPane.showMessageDialog(null, e);
            } finally{
                try {
                    rs.close();
                    pst.close();
                    con.close();
                    System.gc();
                } catch (SQLException e) {
            }
        }
    }
    private void fillComboBoxWithName(){
        PreparedStatement pst = null;
        Connection con = DbConnector.ConnectDB();
        ResultSet rs = null;
        try {
            String sql = "SELECT * FROM products"; 
            pst = con.prepareStatement(sql);
            rs = pst.executeQuery();
            while (rs.next()) {
                name_cmb.addItem(rs.getString(2));   
                }
            } catch (SQLException e) {
                JOptionPane.showMessageDialog(null, e);
            } finally{
                try {
                    rs.close();
                    pst.close();
                    con.close();
                    System.gc();
                } catch (SQLException e) {
            }
        }
    }
    public void searchItemsByName(String n){
        PreparedStatement pst = null;
        Connection con = DbConnector.ConnectDB();
        ResultSet rs = null;
        try {
         String sql = "SELECT * FROM products WHERE Name = '"+n+"'"; 
         pst = con.prepareStatement(sql);
         rs = pst.executeQuery();
         item_tbl.setModel(DbUtils.resultSetToTableModel(rs));
         
        
        } catch (SQLException e) {
            JOptionPane.showMessageDialog(null, e);
        } finally{
            try {
                rs.close();
                pst.close();
                con.close();
                System.gc();
            } catch (SQLException e) {
            
            }
        }
    }
    public void searchItemsByCompany(String c){
        PreparedStatement pst = null;
        Connection con = DbConnector.ConnectDB();
        ResultSet rs = null; 
        try {
         String sql = "SELECT * FROM products WHERE Company = '"+c+"'"; 
         pst = con.prepareStatement(sql);
         rs = pst.executeQuery();
         item_tbl.setModel(DbUtils.resultSetToTableModel(rs));
        } catch (SQLException e) {
            JOptionPane.showMessageDialog(null, e);
        } finally{
            try {
                rs.close();
                pst.close();
                con.close();
                System.gc();
            } catch (SQLException e) {
            
            }
        }
    }
    public void searchItemsByType(String t){
        PreparedStatement pst = null;
        Connection con = DbConnector.ConnectDB();
        ResultSet rs = null;
        try {
            String sql = "SELECT * FROM products WHERE Category = '"+t+"'"; 
            pst = con.prepareStatement(sql);
            rs = pst.executeQuery();
            item_tbl.setModel(DbUtils.resultSetToTableModel(rs));
        } catch (SQLException e) {
            JOptionPane.showMessageDialog(null, e);
        } finally{
            try {
                rs.close();
                pst.close();
                con.close();
                System.gc();
            } catch (SQLException e) {
            
            }
        }
    }
    private void calculatingGrandTotal() throws SQLException{
        int totalQty = 0;
        float grandTotal = 0;
        for (Product allItem : getAllItems()) {
            grandTotal += ( allItem.getBuyingPrice() * allItem.getQty());
            totalQty += allItem.getQty();
        }
//        for (int i = 0; i < getAllItems().size(); i++) {
//            grandTotal += getAllItems().get(i).getBuyingPrice() * getAllItems().get(i).getQty();
//            totalQty += getAllItems().get(i).getQty();
//        }
        System.gc();
        getAllItems().clear();
        String tk = "৳";
        gTotal_lbl.setText("Grand Total for all Items : "+tk+""+Float.toString(grandTotal));
        totalqty_lbl.setText("Total items : "+Integer.toString(totalQty));
        totalQty = 0;
        grandTotal = 0;
    }
    public void calculatingGrandTotal(String name) throws SQLException{
        int totalQty = 0;
        float grandTotal = 0;
        for (Product allItem : getAllCategorisedItems(name)) {
            totalQty += allItem.getQty();
            grandTotal += ( allItem.getBuyingPrice() * allItem.getQty());
        }
//        for (int i = 0; i < getAllCategorisedItems(name).size(); i++) {
//            totalQty += getAllCategorisedItems(name).get(i).getQty();
//            grandTotal += getAllCategorisedItems(name).get(i).getQty() * getAllCategorisedItems(name).get(i).getBuyingPrice();
//        }
        System.gc();
        getAllCategorisedItems(name).clear();
        String tk = "৳";
        gTotal_lbl.setText("Grand Total for "+name+" : "+tk+""+Float.toString(grandTotal));
        totalqty_lbl.setText("Total "+name+": "+Integer.toString(totalQty));
        totalQty = 0;
        grandTotal = 0;
    }
    public void calculatingGrandTotalCompanyWise(String name) throws SQLException{
        int totalQty = 0;
        float grandTotal = 0;
        for (Product allItem : getAllCompanyItems(name)) {
            grandTotal += ( allItem.getBuyingPrice() * allItem.getQty());
            totalQty += allItem.getQty();
        }
//        for (int i = 0; i < getAllCompanyItems(name).size(); i++) {
//            grandTotal += getAllCompanyItems(name).get(i).getBuyingPrice() * getAllCompanyItems(name).get(i).getQty();
//            totalQty += getAllCompanyItems(name).get(i).getQty();
//        }
        System.gc();
        getAllCompanyItems(name).clear();
        String tk = "৳";
        gTotal_lbl.setText("Grand Total for "+name+" : "+tk+""+Float.toString(grandTotal));
        totalqty_lbl.setText("Total "+name+" : "+Integer.toString(totalQty));
        totalQty = 0;
        grandTotal = 0;
    }
    public ArrayList<Product> getAllItems() throws SQLException{
        ArrayList<Product> products = new ArrayList<>();
        Connection con = DbConnector.ConnectDB();
        String query  = "SELECT * FROM products";
        Statement st = con.createStatement();
        ResultSet rs = null;
        try {
            rs = st.executeQuery(query);
            Product product;
            while(rs.next()){
//                product = new Product(rs.getInt("ProductId"),rs.getString("Name"),rs.getString("Category"),
//                    rs.getString("Company"),rs.getFloat("PurchaseCost"),rs.getInt("Quantity"),
//                    rs.getDate("InhouseDate").toString(),rs.getBytes("Image"),rs.getString("Supplier"),rs.getString("Description"));
                    product = new Product(rs.getInt("ProductId"),rs.getInt("Quantity"),rs.getFloat("PurchaseCost"));
                    products.add(product);
            }
            //product = null;
            System.gc();
        } catch (SQLException ex) {
            
        }
        finally{
            try {
                rs.close();
                st.close();
                con.close();
                System.gc();
            } catch (SQLException e) {
            }
        }
        return products;
        //products.clear();
        
        
    }
    public ArrayList<Product> getAllCategorisedItems(String name) throws SQLException{
        ArrayList<Product> products = new ArrayList<>();
        Connection con = DbConnector.ConnectDB();
        String query  = "SELECT * FROM products WHERE Category = '"+name+"'";
        Statement st = con.createStatement();
        ResultSet rs = null;
        try {
            rs = st.executeQuery(query);
            Product product;
            while(rs.next()){
//                product = new Product(rs.getInt("ProductId"),rs.getString("Name"),rs.getString("Category"),
//                    rs.getString("Company"),rs.getFloat("PurchaseCost"),rs.getInt("Quantity"),
//                    rs.getDate("InhouseDate").toString(),rs.getBytes("Image"),rs.getString("Supplier"),rs.getString("Description"));
                product = new Product(rs.getInt("ProductId"),rs.getInt("Quantity"),rs.getFloat("PurchaseCost"));
                products.add(product);
            }
            //product = null;
            System.gc();
        } catch (SQLException ex) {
          
        }
        finally{
            try {
                rs.close();
                st.close();
                con.close();
                System.gc();
            } catch (SQLException e) {
            }
        }
        return products;
    }
    public ArrayList<Product> getAllCompanyItems(String name) throws SQLException{
        ArrayList<Product> products = new ArrayList<>();
        Connection con = DbConnector.ConnectDB();
        String query  = "SELECT * FROM products WHERE Company = '"+name+"'";
        Statement st = con.createStatement();
        ResultSet rs = null;
        try {
            rs = st.executeQuery(query);
            Product product;
            while(rs.next()){
//                product = new Product(rs.getInt("ProductId"),rs.getString("Name"),rs.getString("Category"),
//                    rs.getString("Company"),rs.getFloat("PurchaseCost"),rs.getInt("Quantity"),
//                    rs.getDate("InhouseDate").toString(),rs.getBytes("Image"),rs.getString("Supplier"),rs.getString("Description"));
                product = new Product(rs.getInt("ProductId"),rs.getInt("Quantity"),rs.getFloat("PurchaseCost"));
                products.add(product);
            }
            //product = null;
            System.gc();
        } catch (SQLException ex) {
            
        }
        finally{
            try {
                rs.close();
                st.close();
                con.close();
                System.gc();
            } catch (SQLException e) {
            }
        }
        return products;
    }
    public void showSelectedProduct(int index) throws SQLException{

        id_lbl.setText(Integer.toString(getAllItems().get(index).getId()));
        name_txt.setText(getAllItems().get(index).getName());
        cat_cmb.setSelectedItem((String)getAllItems().get(index).getCategory());
        com_cmb.setSelectedItem((String)getAllItems().get(index).getCompany());
        pCost_txt.setText(Float.toString(getAllItems().get(index).getBuyingPrice()));
        qty_txt.setText(Integer.toString(getAllItems().get(index).getQty()));
        try {
            java.util.Date d  =  new SimpleDateFormat("yyyy-MM-dd").parse(getAllItems().get(index).getjDate());
            date_choose.setDate(d);
        } catch (SQLException | ParseException e) {
        
        }
        sup_txt111111.setText(getAllItems().get(index).getSupplier());
        //image_lbl.setIcon(resizeImage(null, getAllItems().get(index).getPicture(),image_lbl.getWidth(), image_lbl.getHeight(),Image.SCALE_SMOOTH));                jComboBox1.setText(getAllItems().get(index).getSupplier());
        des_txt.setText(getAllItems().get(index).getDescription());
        if (Integer.parseInt(qty_txt.getText()) > 0) {
                    jCheckBox1.setSelected(true);
                    jCheckBox2.setSelected(false);
                }else{
                    jCheckBox1.setSelected(false);
                    jCheckBox2.setSelected(true);
                }
    }
    public void clearAllFields(){
        id_lbl.setText("");
        name_txt.setText("");
         //com_cmb.setSelectedItem(null);
          //cat_cmb.setSelectedItem(null);
           pCost_txt.setText("");
            qty_txt.setText("");
                       //date_choose.setDate(null); 
                        sup_txt111111.setText("");
                        image_lbl.setIcon(null);
                        des_txt.setText("");
                        name_cmb.setSelectedIndex(-1);
                        //category_cmb.setSelectedIndex(-1);
                        //company_cmb.setSelectedIndex(-1);
                        jCheckBox1.setSelected(false);
                        jCheckBox2.setSelected(false);
                        pCostUpdate_txt.setText("");
                        qtyUpdate_txt.setText("");
    }
    public boolean checkInputs(){
        
        if ("".equals(qty_txt.getText())
           || name_txt.getText() == null 
                || pCost_txt.getText() == null
           || qty_txt.getText() == null
           || date_choose.getDate() == null
           )
        {
            return false;
        }else{
            try{
                Float.parseFloat(pCost_txt.getText());
                return true;
            }catch(NumberFormatException e){
                return false;
            }   
        }
    }
    public boolean checkUpdateInputs(){
        
        if ("".equals(qty_txt.getText())
                || pCost_txt.getText() == null
           || qty_txt.getText() == null
           || date_choose.getDate() == null
           )
        {
            return false;
        }else{
            try{
                Float.parseFloat(pCost_txt.getText());
                return true;
            }catch(NumberFormatException e){
                return false;
            }   
        }
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JComboBox<String> cat_cmb;
    private javax.swing.JComboBox<String> category_cmb;
    private javax.swing.JButton chooseImage_btn;
    private javax.swing.JComboBox<String> com_cmb;
    private javax.swing.JComboBox<String> company_cmb;
    private com.toedter.calendar.JDateChooser date_choose;
    private javax.swing.JTextArea des_txt;
    private javax.swing.JLabel gTotal_lbl;
    private javax.swing.JLabel id_lbl;
    private javax.swing.JTextField id_txt;
    private javax.swing.JLabel image_lbl;
    private javax.swing.JLabel itemInfo_lbl;
    private javax.swing.JTable item_tbl;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton10;
    private javax.swing.JButton jButton11;
    private javax.swing.JButton jButton12;
    private javax.swing.JButton jButton13;
    private javax.swing.JButton jButton14;
    private javax.swing.JButton jButton15;
    private javax.swing.JButton jButton16;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JButton jButton4;
    private javax.swing.JButton jButton5;
    private javax.swing.JButton jButton6;
    private javax.swing.JButton jButton7;
    private javax.swing.JButton jButton8;
    private javax.swing.JButton jButton9;
    private javax.swing.JCheckBox jCheckBox1;
    private javax.swing.JCheckBox jCheckBox2;
    private javax.swing.JDesktopPane jDesktopPane1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JComboBox<String> name_cmb;
    private javax.swing.JTextField name_txt;
    private javax.swing.JTextField pCostUpdate_txt;
    private javax.swing.JTextField pCost_txt;
    private javax.swing.JTextField qtyUpdate_txt;
    private javax.swing.JTextField qty_txt;
    private javax.swing.JComboBox<String> sup_cmb;
    private javax.swing.JTextField sup_txt111111;
    private javax.swing.JLabel totalqty_lbl;
    // End of variables declaration//GEN-END:variables
}
